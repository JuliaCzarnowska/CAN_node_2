
C:\Users\Julia\Documents\stm_projekty\CAN_node_2\Debug\CAN_node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000377c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080038bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000100  20000004  080038c0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000104  080038c0  00020104  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000076ff  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001615  00000000  00000000  0002772c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000658  00000000  00000000  00028d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000580  00000000  00000000  000293a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000035e8  00000000  00000000  00029920  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ca9  00000000  00000000  0002cf08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002ebb1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001748  00000000  00000000  0002ec30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08003870 	.word	0x08003870

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08003870 	.word	0x08003870

0800014c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fead 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 f9ea 	bl	8003540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000180:	f002 f9d2 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8000184:	4602      	mov	r2, r0
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <HAL_InitTick+0x34>)
 8000188:	fba3 2302 	umull	r2, r3, r3, r2
 800018c:	099b      	lsrs	r3, r3, #6
 800018e:	4618      	mov	r0, r3
 8000190:	f000 feca 	bl	8000f28 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000194:	2200      	movs	r2, #0
 8000196:	6879      	ldr	r1, [r7, #4]
 8000198:	f04f 30ff 	mov.w	r0, #4294967295
 800019c:	f000 fe9a 	bl	8000ed4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80001a0:	2300      	movs	r3, #0
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	10624dd3 	.word	0x10624dd3

080001b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  uwTick++;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x18>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x18>)
 80001bc:	6013      	str	r3, [r2, #0]
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  return uwTick;
 80001d0:	4b02      	ldr	r3, [pc, #8]	; (80001dc <HAL_GetTick+0x10>)
 80001d2:	681b      	ldr	r3, [r3, #0]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000020 	.word	0x20000020

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80001ec:	f7ff ffee 	bl	80001cc <HAL_GetTick>
 80001f0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80001f2:	bf00      	nop
 80001f4:	f7ff ffea 	bl	80001cc <HAL_GetTick>
 80001f8:	4602      	mov	r2, r0
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	1ad2      	subs	r2, r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f7      	bcc.n	80001f4 <HAL_Delay+0x14>
  {
  }
}
 8000204:	bf00      	nop
 8000206:	3710      	adds	r7, #16
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8000214:	2300      	movs	r3, #0
 8000216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_mcr = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d101      	bne.n	800022a <HAL_CAN_Init+0x1e>
  {
     return HAL_ERROR;
 8000226:	2301      	movs	r3, #1
 8000228:	e0cd      	b.n	80003c6 <HAL_CAN_Init+0x1ba>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d106      	bne.n	8000244 <HAL_CAN_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f002 ff52 	bl	80030e8 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2202      	movs	r2, #2
 8000248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	6812      	ldr	r2, [r2, #0]
 8000254:	6812      	ldr	r2, [r2, #0]
 8000256:	f022 0202 	bic.w	r2, r2, #2
 800025a:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	6812      	ldr	r2, [r2, #0]
 8000264:	6812      	ldr	r2, [r2, #0]
 8000266:	f042 0201 	orr.w	r2, r2, #1
 800026a:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 800026c:	f7ff ffae 	bl	80001cc <HAL_GetTick>
 8000270:	60f8      	str	r0, [r7, #12]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000272:	e010      	b.n	8000296 <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000274:	f7ff ffaa 	bl	80001cc <HAL_GetTick>
 8000278:	4602      	mov	r2, r0
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	2b0a      	cmp	r3, #10
 8000280:	d909      	bls.n	8000296 <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2203      	movs	r2, #3
 8000286:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8000292:	2303      	movs	r3, #3
 8000294:	e097      	b.n	80003c6 <HAL_CAN_Init+0x1ba>

  /* Get timeout */
  tickstart = HAL_GetTick();   
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0e7      	beq.n	8000274 <HAL_CAN_Init+0x68>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d078      	beq.n	80003a4 <HAL_CAN_Init+0x198>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d103      	bne.n	80002c2 <HAL_CAN_Init+0xb6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c0:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	69db      	ldr	r3, [r3, #28]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d103      	bne.n	80002d2 <HAL_CAN_Init+0xc6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d0:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	6a1b      	ldr	r3, [r3, #32]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d103      	bne.n	80002e2 <HAL_CAN_Init+0xd6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	f043 0320 	orr.w	r3, r3, #32
 80002e0:	613b      	str	r3, [r7, #16]
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d103      	bne.n	80002f2 <HAL_CAN_Init+0xe6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	f043 0310 	orr.w	r3, r3, #16
 80002f0:	613b      	str	r3, [r7, #16]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d103      	bne.n	8000302 <HAL_CAN_Init+0xf6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	f043 0308 	orr.w	r3, r3, #8
 8000300:	613b      	str	r3, [r7, #16]
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000306:	2b01      	cmp	r3, #1
 8000308:	d103      	bne.n	8000312 <HAL_CAN_Init+0x106>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	613b      	str	r3, [r7, #16]
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	6812      	ldr	r2, [r2, #0]
 800031c:	f022 01fc 	bic.w	r1, r2, #252	; 0xfc
 8000320:	693a      	ldr	r2, [r7, #16]
 8000322:	430a      	orrs	r2, r1
 8000324:	601a      	str	r2, [r3, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6891      	ldr	r1, [r2, #8]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	68d2      	ldr	r2, [r2, #12]
 8000332:	4311      	orrs	r1, r2
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	6912      	ldr	r2, [r2, #16]
 8000338:	4311      	orrs	r1, r2
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6952      	ldr	r2, [r2, #20]
 800033e:	4311      	orrs	r1, r2
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	6852      	ldr	r2, [r2, #4]
 8000344:	3a01      	subs	r2, #1
 8000346:	430a      	orrs	r2, r1
 8000348:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	6812      	ldr	r2, [r2, #0]
 8000352:	6812      	ldr	r2, [r2, #0]
 8000354:	f022 0201 	bic.w	r2, r2, #1
 8000358:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 800035a:	f7ff ff37 	bl	80001cc <HAL_GetTick>
 800035e:	60f8      	str	r0, [r7, #12]
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000360:	e010      	b.n	8000384 <HAL_CAN_Init+0x178>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000362:	f7ff ff33 	bl	80001cc <HAL_GetTick>
 8000366:	4602      	mov	r2, r0
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	2b0a      	cmp	r3, #10
 800036e:	d909      	bls.n	8000384 <HAL_CAN_Init+0x178>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2203      	movs	r2, #3
 8000374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8000380:	2303      	movs	r3, #3
 8000382:	e020      	b.n	80003c6 <HAL_CAN_Init+0x1ba>

    /* Get timeout */
    tickstart = HAL_GetTick();   
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0e7      	beq.n	8000362 <HAL_CAN_Init+0x156>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <HAL_CAN_Init+0x198>
    {
      status = CAN_INITSTATUS_SUCCESS;
 80003a0:	2301      	movs	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d108      	bne.n	80003bc <HAL_CAN_Init+0x1b0>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2200      	movs	r2, #0
 80003ae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2201      	movs	r2, #1
 80003b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
    /* Return function status */
    return HAL_OK;
 80003b8:	2300      	movs	r3, #0
 80003ba:	e004      	b.n	80003c6 <HAL_CAN_Init+0x1ba>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2204      	movs	r2, #4
 80003c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Return function status */
    return HAL_ERROR;
 80003c4:	2301      	movs	r3, #1
  }
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop

080003d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	2201      	movs	r2, #1
 80003e4:	fa02 f303 	lsl.w	r3, r2, r3
 80003e8:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	6812      	ldr	r2, [r2, #0]
 80003f2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80003f6:	f422 517c 	bic.w	r1, r2, #16128	; 0x3f00
 80003fa:	683a      	ldr	r2, [r7, #0]
 80003fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80003fe:	0212      	lsls	r2, r2, #8
 8000400:	430a      	orrs	r2, r1
 8000402:	f042 0201 	orr.w	r2, r2, #1
 8000406:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8)   );
  
  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	6812      	ldr	r2, [r2, #0]
 8000412:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	43d2      	mvns	r2, r2
 800041a:	400a      	ands	r2, r1
 800041c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  
  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	69db      	ldr	r3, [r3, #28]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d127      	bne.n	8000478 <HAL_CAN_ConfigFilter+0xa8>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	43d2      	mvns	r2, r2
 8000438:	400a      	ands	r2, r1
 800043a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8000446:	6839      	ldr	r1, [r7, #0]
 8000448:	68c9      	ldr	r1, [r1, #12]
 800044a:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 800044c:	6839      	ldr	r1, [r7, #0]
 800044e:	6849      	ldr	r1, [r1, #4]
 8000450:	b289      	uxth	r1, r1
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8000452:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000454:	3248      	adds	r2, #72	; 0x48
 8000456:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	6892      	ldr	r2, [r2, #8]
 8000466:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
 8000468:	683a      	ldr	r2, [r7, #0]
 800046a:	6812      	ldr	r2, [r2, #0]
 800046c:	b292      	uxth	r2, r2
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 800046e:	4302      	orrs	r2, r0
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000470:	3348      	adds	r3, #72	; 0x48
 8000472:	00db      	lsls	r3, r3, #3
 8000474:	440b      	add	r3, r1
 8000476:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	69db      	ldr	r3, [r3, #28]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d126      	bne.n	80004ce <HAL_CAN_ConfigFilter+0xfe>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	6812      	ldr	r2, [r2, #0]
 8000488:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	430a      	orrs	r2, r1
 8000490:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	683a      	ldr	r2, [r7, #0]
 800049a:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800049c:	6839      	ldr	r1, [r7, #0]
 800049e:	6809      	ldr	r1, [r1, #0]
 80004a0:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 80004a2:	6839      	ldr	r1, [r7, #0]
 80004a4:	6849      	ldr	r1, [r1, #4]
 80004a6:	b289      	uxth	r1, r1
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 80004a8:	4301      	orrs	r1, r0
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80004aa:	3248      	adds	r2, #72	; 0x48
 80004ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6819      	ldr	r1, [r3, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80004b8:	683a      	ldr	r2, [r7, #0]
 80004ba:	6892      	ldr	r2, [r2, #8]
 80004bc:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	68d2      	ldr	r2, [r2, #12]
 80004c2:	b292      	uxth	r2, r2
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80004c4:	4302      	orrs	r2, r0
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80004c6:	3348      	adds	r3, #72	; 0x48
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	440b      	add	r3, r1
 80004cc:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d10b      	bne.n	80004ee <HAL_CAN_ConfigFilter+0x11e>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	6812      	ldr	r2, [r2, #0]
 80004de:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	400a      	ands	r2, r1
 80004e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80004ec:	e009      	b.n	8000502 <HAL_CAN_ConfigFilter+0x132>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	6812      	ldr	r2, [r2, #0]
 80004f6:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d10b      	bne.n	8000522 <HAL_CAN_ConfigFilter+0x152>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	6812      	ldr	r2, [r2, #0]
 8000512:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	43d2      	mvns	r2, r2
 800051a:	400a      	ands	r2, r1
 800051c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000520:	e009      	b.n	8000536 <HAL_CAN_ConfigFilter+0x166>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	430a      	orrs	r2, r1
 8000532:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	6a1b      	ldr	r3, [r3, #32]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d109      	bne.n	8000552 <HAL_CAN_ConfigFilter+0x182>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	6812      	ldr	r2, [r2, #0]
 8000546:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	430a      	orrs	r2, r1
 800054e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	6812      	ldr	r2, [r2, #0]
 800055a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800055e:	f022 0201 	bic.w	r2, r2, #1
 8000562:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 800057c:	2304      	movs	r3, #4
 800057e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_RX))
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b01      	cmp	r3, #1
 800058a:	d006      	beq.n	800059a <HAL_CAN_Transmit_IT+0x26>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b22      	cmp	r3, #34	; 0x22
 8000596:	f040 810a 	bne.w	80007ae <HAL_CAN_Transmit_IT+0x23a>
  {
    /* Process Locked */
    __HAL_LOCK(hcan);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d101      	bne.n	80005a8 <HAL_CAN_Transmit_IT+0x34>
 80005a4:	2302      	movs	r3, #2
 80005a6:	e105      	b.n	80007b4 <HAL_CAN_Transmit_IT+0x240>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2201      	movs	r2, #1
 80005ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Select one empty transmit mailbox */
    if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <HAL_CAN_Transmit_IT+0x50>
    {
      transmitmailbox = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	e015      	b.n	80005f0 <HAL_CAN_Transmit_IT+0x7c>
    }
    else if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <HAL_CAN_Transmit_IT+0x64>
    {
      transmitmailbox = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e00b      	b.n	80005f0 <HAL_CAN_Transmit_IT+0x7c>
    }
    else if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME2))
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <HAL_CAN_Transmit_IT+0x78>
    {
      transmitmailbox = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e001      	b.n	80005f0 <HAL_CAN_Transmit_IT+0x7c>
    }
    else
    {
      transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 80005ec:	2304      	movs	r3, #4
 80005ee:	60fb      	str	r3, [r7, #12]
    }

    if(transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	f000 80dd 	beq.w	80007b2 <HAL_CAN_Transmit_IT+0x23e>
    {
      /* Set up the Id */
      hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6819      	ldr	r1, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3318      	adds	r3, #24
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f003 0201 	and.w	r2, r3, #1
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3318      	adds	r3, #24
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	440b      	add	r3, r1
 8000616:	601a      	str	r2, [r3, #0]
      if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d117      	bne.n	8000652 <HAL_CAN_Transmit_IT+0xde>
      {
        assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6819      	ldr	r1, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	3318      	adds	r3, #24
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	4413      	add	r3, r2
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	0558      	lsls	r0, r3, #21
                                                             hcan->pTxMsg->RTR);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	68db      	ldr	r3, [r3, #12]
      /* Set up the Id */
      hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
      if (hcan->pTxMsg->IDE == CAN_ID_STD)
      {
        assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 8000642:	4303      	orrs	r3, r0
 8000644:	431a      	orrs	r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3318      	adds	r3, #24
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	440b      	add	r3, r1
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	e01a      	b.n	8000688 <HAL_CAN_Transmit_IT+0x114>
                                                             hcan->pTxMsg->RTR);
      }
      else
      {
        assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3318      	adds	r3, #24
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	4413      	add	r3, r2
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	00d8      	lsls	r0, r3, #3
                                                             hcan->pTxMsg->IDE |
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	689b      	ldr	r3, [r3, #8]
                                                             hcan->pTxMsg->RTR);
      }
      else
      {
        assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 8000672:	4318      	orrs	r0, r3
                                                             hcan->pTxMsg->IDE |
                                                             hcan->pTxMsg->RTR);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	68db      	ldr	r3, [r3, #12]
      }
      else
      {
        assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
                                                             hcan->pTxMsg->IDE |
 800067a:	4303      	orrs	r3, r0
                                                             hcan->pTxMsg->RTR);
      }
      else
      {
        assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 800067c:	431a      	orrs	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3318      	adds	r3, #24
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	440b      	add	r3, r1
 8000686:	601a      	str	r2, [r3, #0]
                                                             hcan->pTxMsg->IDE |
                                                             hcan->pTxMsg->RTR);
      }
    
      /* Set up the DLC */
      hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000690:	6912      	ldr	r2, [r2, #16]
 8000692:	f002 020f 	and.w	r2, r2, #15
 8000696:	611a      	str	r2, [r3, #16]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6819      	ldr	r1, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3318      	adds	r3, #24
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	4413      	add	r3, r2
 80006a8:	3304      	adds	r3, #4
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 020f 	bic.w	r2, r3, #15
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3318      	adds	r3, #24
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	440b      	add	r3, r1
 80006b8:	3304      	adds	r3, #4
 80006ba:	601a      	str	r2, [r3, #0]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3318      	adds	r3, #24
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	4413      	add	r3, r2
 80006cc:	3304      	adds	r3, #4
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	691b      	ldr	r3, [r3, #16]
 80006d6:	431a      	orrs	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3318      	adds	r3, #24
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	440b      	add	r3, r1
 80006e0:	3304      	adds	r3, #4
 80006e2:	601a      	str	r2, [r3, #0]
      
      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	7ddb      	ldrb	r3, [r3, #23]
 80006ee:	061a      	lsls	r2, r3, #24
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	7d9b      	ldrb	r3, [r3, #22]
 80006f6:	041b      	lsls	r3, r3, #16
 80006f8:	431a      	orrs	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	7d5b      	ldrb	r3, [r3, #21]
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	4313      	orrs	r3, r2
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000708:	7d12      	ldrb	r2, [r2, #20]
 800070a:	431a      	orrs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	440b      	add	r3, r1
 8000712:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000716:	601a      	str	r2, [r3, #0]
                                                                  ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                  ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_BIT_POSITION) | 
                                                                  ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_BIT_POSITION)  );
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	7edb      	ldrb	r3, [r3, #27]
 8000722:	061a      	lsls	r2, r3, #24
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	7e9b      	ldrb	r3, [r3, #26]
 800072a:	041b      	lsls	r3, r3, #16
 800072c:	431a      	orrs	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	7e5b      	ldrb	r3, [r3, #25]
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	4313      	orrs	r3, r2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800073c:	7e12      	ldrb	r2, [r2, #24]
 800073e:	431a      	orrs	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	440b      	add	r3, r1
 8000746:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800074a:	601a      	str	r2, [r3, #0]
                                                                  ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                  ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_BIT_POSITION) |
                                                                  ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_BIT_POSITION)  );
    
      if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b22      	cmp	r3, #34	; 0x22
 8000756:	d104      	bne.n	8000762 <HAL_CAN_Transmit_IT+0x1ee>
      {
        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2232      	movs	r2, #50	; 0x32
 800075c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000760:	e003      	b.n	800076a <HAL_CAN_Transmit_IT+0x1f6>
      }
      else
      {
        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2212      	movs	r2, #18
 8000766:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      }
      
      /* Set CAN error code to none */
      hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process Unlocked */
      __HAL_UNLOCK(hcan);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /*  - Enable Error passive Interrupt */
      /*  - Enable Bus-off Interrupt */
      /*  - Enable Last error code Interrupt */
      /*  - Enable Error Interrupt */
      /*  - Enable Transmit mailbox empty Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	6153      	str	r3, [r2, #20]
                                CAN_IT_LEC |
                                CAN_IT_ERR |
                                CAN_IT_TME  );
      
      /* Request transmission */
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6819      	ldr	r1, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3318      	adds	r3, #24
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	4413      	add	r3, r2
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f043 0201 	orr.w	r2, r3, #1
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3318      	adds	r3, #24
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	440b      	add	r3, r1
 80007aa:	601a      	str	r2, [r3, #0]
    else
    {
      transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
    }

    if(transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
 80007ac:	e001      	b.n	80007b2 <HAL_CAN_Transmit_IT+0x23e>
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
    }
  }
  else
  {
    return HAL_BUSY;
 80007ae:	2302      	movs	r3, #2
 80007b0:	e000      	b.n	80007b4 <HAL_CAN_Transmit_IT+0x240>
  }
  
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <HAL_CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d005      	beq.n	80007e4 <HAL_CAN_Receive_IT+0x24>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b12      	cmp	r3, #18
 80007e2:	d13f      	bne.n	8000864 <HAL_CAN_Receive_IT+0xa4>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d101      	bne.n	80007f2 <HAL_CAN_Receive_IT+0x32>
 80007ee:	2302      	movs	r3, #2
 80007f0:	e03b      	b.n	800086a <HAL_CAN_Receive_IT+0xaa>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2201      	movs	r2, #1
 80007f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b12      	cmp	r3, #18
 8000804:	d104      	bne.n	8000810 <HAL_CAN_Receive_IT+0x50>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2232      	movs	r2, #50	; 0x32
 800080a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800080e:	e003      	b.n	8000818 <HAL_CAN_Receive_IT+0x58>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2222      	movs	r2, #34	; 0x22
 8000814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
    
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	63da      	str	r2, [r3, #60]	; 0x3c
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6153      	str	r3, [r2, #20]
                              CAN_IT_LEC |
                              CAN_IT_ERR |
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if(FIFONumber == CAN_FIFO0)
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d108      	bne.n	8000852 <HAL_CAN_Receive_IT+0x92>
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	6812      	ldr	r2, [r2, #0]
 8000848:	6952      	ldr	r2, [r2, #20]
 800084a:	f042 0202 	orr.w	r2, r2, #2
 800084e:	615a      	str	r2, [r3, #20]
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);

    if(FIFONumber == CAN_FIFO0)
 8000850:	e00a      	b.n	8000868 <HAL_CAN_Receive_IT+0xa8>
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
    }
    else
    {
      /* Enable FIFO 1 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	6812      	ldr	r2, [r2, #0]
 800085a:	6952      	ldr	r2, [r2, #20]
 800085c:	f042 0210 	orr.w	r2, r2, #16
 8000860:	615a      	str	r2, [r3, #20]
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);

    if(FIFONumber == CAN_FIFO0)
 8000862:	e001      	b.n	8000868 <HAL_CAN_Receive_IT+0xa8>
    }
    
  }
  else
  {
    return HAL_BUSY;
 8000864:	2302      	movs	r3, #2
 8000866:	e000      	b.n	800086a <HAL_CAN_Receive_IT+0xaa>
  }
  
  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	2b00      	cmp	r3, #0
 8000888:	d01a      	beq.n	80008c0 <HAL_CAN_IRQHandler+0x4c>
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	4b7f      	ldr	r3, [pc, #508]	; (8000a90 <HAL_CAN_IRQHandler+0x21c>)
 8000892:	4013      	ands	r3, r2
 8000894:	4a7e      	ldr	r2, [pc, #504]	; (8000a90 <HAL_CAN_IRQHandler+0x21c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d00f      	beq.n	80008ba <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	4b7c      	ldr	r3, [pc, #496]	; (8000a94 <HAL_CAN_IRQHandler+0x220>)
 80008a2:	4013      	ands	r3, r2
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80008a4:	4a7b      	ldr	r2, [pc, #492]	; (8000a94 <HAL_CAN_IRQHandler+0x220>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d007      	beq.n	80008ba <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	4b79      	ldr	r3, [pc, #484]	; (8000a98 <HAL_CAN_IRQHandler+0x224>)
 80008b2:	4013      	ands	r3, r2
{
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80008b4:	4a78      	ldr	r2, [pc, #480]	; (8000a98 <HAL_CAN_IRQHandler+0x224>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d102      	bne.n	80008c0 <HAL_CAN_IRQHandler+0x4c>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
    {
      /* Call transmit function */
      CAN_Transmit_IT(hcan);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f902 	bl	8000ac4 <CAN_Transmit_IT>
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00a      	beq.n	80008e4 <HAL_CAN_IRQHandler+0x70>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	f003 0303 	and.w	r3, r3, #3
      CAN_Transmit_IT(hcan);
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d003      	beq.n	80008e4 <HAL_CAN_IRQHandler+0x70>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 80008dc:	2100      	movs	r1, #0
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 f922 	bl	8000b28 <CAN_Receive_IT>
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00a      	beq.n	8000908 <HAL_CAN_IRQHandler+0x94>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	f003 0303 	and.w	r3, r3, #3
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d003      	beq.n	8000908 <HAL_CAN_IRQHandler+0x94>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000900:	2101      	movs	r1, #1
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f910 	bl	8000b28 <CAN_Receive_IT>
  }
  
  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	2b00      	cmp	r3, #0
 8000914:	d013      	beq.n	800093e <HAL_CAN_IRQHandler+0xca>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
  }
  
  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00c      	beq.n	800093e <HAL_CAN_IRQHandler+0xca>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    CAN_Receive_IT(hcan, CAN_FIFO1);
  }
  
  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800092e:	2b00      	cmp	r3, #0
 8000930:	d005      	beq.n	800093e <HAL_CAN_IRQHandler+0xca>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000936:	f043 0201 	orr.w	r2, r3, #1
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	2b00      	cmp	r3, #0
 800094a:	d013      	beq.n	8000974 <HAL_CAN_IRQHandler+0x100>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f403 7300 	and.w	r3, r3, #512	; 0x200
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00c      	beq.n	8000974 <HAL_CAN_IRQHandler+0x100>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000964:	2b00      	cmp	r3, #0
 8000966:	d005      	beq.n	8000974 <HAL_CAN_IRQHandler+0x100>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800096c:	f043 0202 	orr.w	r2, r3, #2
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	2b00      	cmp	r3, #0
 8000980:	d013      	beq.n	80009aa <HAL_CAN_IRQHandler+0x136>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00c      	beq.n	80009aa <HAL_CAN_IRQHandler+0x136>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 800099a:	2b00      	cmp	r3, #0
 800099c:	d005      	beq.n	80009aa <HAL_CAN_IRQHandler+0x136>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009a2:	f043 0204 	orr.w	r2, r3, #4
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d054      	beq.n	8000a62 <HAL_CAN_IRQHandler+0x1ee>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d04d      	beq.n	8000a62 <HAL_CAN_IRQHandler+0x1ee>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d046      	beq.n	8000a62 <HAL_CAN_IRQHandler+0x1ee>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80009de:	2b30      	cmp	r3, #48	; 0x30
 80009e0:	d01b      	beq.n	8000a1a <HAL_CAN_IRQHandler+0x1a6>
 80009e2:	2b30      	cmp	r3, #48	; 0x30
 80009e4:	d804      	bhi.n	80009f0 <HAL_CAN_IRQHandler+0x17c>
 80009e6:	2b10      	cmp	r3, #16
 80009e8:	d009      	beq.n	80009fe <HAL_CAN_IRQHandler+0x18a>
 80009ea:	2b20      	cmp	r3, #32
 80009ec:	d00e      	beq.n	8000a0c <HAL_CAN_IRQHandler+0x198>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 80009ee:	e030      	b.n	8000a52 <HAL_CAN_IRQHandler+0x1de>
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 80009f0:	2b50      	cmp	r3, #80	; 0x50
 80009f2:	d020      	beq.n	8000a36 <HAL_CAN_IRQHandler+0x1c2>
 80009f4:	2b60      	cmp	r3, #96	; 0x60
 80009f6:	d025      	beq.n	8000a44 <HAL_CAN_IRQHandler+0x1d0>
 80009f8:	2b40      	cmp	r3, #64	; 0x40
 80009fa:	d015      	beq.n	8000a28 <HAL_CAN_IRQHandler+0x1b4>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 80009fc:	e029      	b.n	8000a52 <HAL_CAN_IRQHandler+0x1de>
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
    {
      case(CAN_ESR_LEC_0):
          /* Set CAN error code to STF error */
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a02:	f043 0208 	orr.w	r2, r3, #8
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000a0a:	e022      	b.n	8000a52 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_1):
          /* Set CAN error code to FOR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a10:	f043 0210 	orr.w	r2, r3, #16
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000a18:	e01b      	b.n	8000a52 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
          /* Set CAN error code to ACK error */
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1e:	f043 0220 	orr.w	r2, r3, #32
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000a26:	e014      	b.n	8000a52 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_2):
          /* Set CAN error code to BR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000a34:	e00d      	b.n	8000a52 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
          /* Set CAN error code to BD error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000a42:	e006      	b.n	8000a52 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000a50:	bf00      	nop
      default:
          break;
    }

    /* Clear Last error code Flag */ 
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	6812      	ldr	r2, [r2, #0]
 8000a5a:	6992      	ldr	r2, [r2, #24]
 8000a5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a60:	619a      	str	r2, [r3, #24]
  }
  
  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d00e      	beq.n	8000a88 <HAL_CAN_IRQHandler+0x214>
  {
    /* Clear ERRI Flag */ 
    hcan->Instance->MSR |= CAN_MSR_ERRI; 
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	6852      	ldr	r2, [r2, #4]
 8000a74:	f042 0204 	orr.w	r2, r2, #4
 8000a78:	605a      	str	r2, [r3, #4]
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f814 	bl	8000ab0 <HAL_CAN_ErrorCallback>
  }  
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	04000003 	.word	0x04000003
 8000a94:	08000300 	.word	0x08000300
 8000a98:	10030000 	.word	0x10030000

08000a9c <HAL_CAN_TxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback can be implemented in the user file
   */
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback can be implemented in the user file
   */
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	6952      	ldr	r2, [r2, #20]
 8000ad6:	f022 0201 	bic.w	r2, r2, #1
 8000ada:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b12      	cmp	r3, #18
 8000ae6:	d107      	bne.n	8000af8 <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	6952      	ldr	r2, [r2, #20]
 8000af2:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000af6:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b32      	cmp	r3, #50	; 0x32
 8000b02:	d104      	bne.n	8000b0e <CAN_Transmit_IT+0x4a>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2222      	movs	r2, #34	; 0x22
 8000b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000b0c:	e003      	b.n	8000b16 <CAN_Transmit_IT+0x52>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffc0 	bl	8000a9c <HAL_CAN_TxCpltCallback>
  
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop

08000b28 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	6811      	ldr	r1, [r2, #0]
 8000b3c:	78fa      	ldrb	r2, [r7, #3]
 8000b3e:	321b      	adds	r2, #27
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	440a      	add	r2, r1
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	f002 0204 	and.w	r2, r2, #4
 8000b4a:	609a      	str	r2, [r3, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10b      	bne.n	8000b6e <CAN_Receive_IT+0x46>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	6811      	ldr	r1, [r2, #0]
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	321b      	adds	r2, #27
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	440a      	add	r2, r1
 8000b66:	6812      	ldr	r2, [r2, #0]
 8000b68:	0d52      	lsrs	r2, r2, #21
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	e00a      	b.n	8000b84 <CAN_Receive_IT+0x5c>
  }
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6811      	ldr	r1, [r2, #0]
 8000b76:	78fa      	ldrb	r2, [r7, #3]
 8000b78:	321b      	adds	r2, #27
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	440a      	add	r2, r1
 8000b7e:	6812      	ldr	r2, [r2, #0]
 8000b80:	08d2      	lsrs	r2, r2, #3
 8000b82:	605a      	str	r2, [r3, #4]
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6811      	ldr	r1, [r2, #0]
 8000b8c:	78fa      	ldrb	r2, [r7, #3]
 8000b8e:	321b      	adds	r2, #27
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	440a      	add	r2, r1
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	f002 0202 	and.w	r2, r2, #2
 8000b9a:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	6811      	ldr	r1, [r2, #0]
 8000ba4:	78fa      	ldrb	r2, [r7, #3]
 8000ba6:	321b      	adds	r2, #27
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	440a      	add	r2, r1
 8000bac:	3204      	adds	r2, #4
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	f002 020f 	and.w	r2, r2, #15
 8000bb4:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	6811      	ldr	r1, [r2, #0]
 8000bbe:	78fa      	ldrb	r2, [r7, #3]
 8000bc0:	321b      	adds	r2, #27
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	440a      	add	r2, r1
 8000bc6:	3204      	adds	r2, #4
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	0a12      	lsrs	r2, r2, #8
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	61da      	str	r2, [r3, #28]
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	6811      	ldr	r1, [r2, #0]
 8000bd8:	78fa      	ldrb	r2, [r7, #3]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	440a      	add	r2, r1
 8000bde:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	751a      	strb	r2, [r3, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6811      	ldr	r1, [r2, #0]
 8000bf0:	78fa      	ldrb	r2, [r7, #3]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	440a      	add	r2, r1
 8000bf6:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000bfa:	6812      	ldr	r2, [r2, #0]
 8000bfc:	0a12      	lsrs	r2, r2, #8
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	755a      	strb	r2, [r3, #21]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	6811      	ldr	r1, [r2, #0]
 8000c0a:	78fa      	ldrb	r2, [r7, #3]
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	440a      	add	r2, r1
 8000c10:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	0c12      	lsrs	r2, r2, #16
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	759a      	strb	r2, [r3, #22]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6811      	ldr	r1, [r2, #0]
 8000c24:	78fa      	ldrb	r2, [r7, #3]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	440a      	add	r2, r1
 8000c2a:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000c2e:	6812      	ldr	r2, [r2, #0]
 8000c30:	0e12      	lsrs	r2, r2, #24
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	75da      	strb	r2, [r3, #23]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	6811      	ldr	r1, [r2, #0]
 8000c3e:	78fa      	ldrb	r2, [r7, #3]
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	440a      	add	r2, r1
 8000c44:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	761a      	strb	r2, [r3, #24]
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6811      	ldr	r1, [r2, #0]
 8000c56:	78fa      	ldrb	r2, [r7, #3]
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	440a      	add	r2, r1
 8000c5c:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	0a12      	lsrs	r2, r2, #8
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	765a      	strb	r2, [r3, #25]
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	6811      	ldr	r1, [r2, #0]
 8000c70:	78fa      	ldrb	r2, [r7, #3]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	440a      	add	r2, r1
 8000c76:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	0c12      	lsrs	r2, r2, #16
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	769a      	strb	r2, [r3, #26]
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6811      	ldr	r1, [r2, #0]
 8000c8a:	78fa      	ldrb	r2, [r7, #3]
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	440a      	add	r2, r1
 8000c90:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000c94:	6812      	ldr	r2, [r2, #0]
 8000c96:	0e12      	lsrs	r2, r2, #24
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	76da      	strb	r2, [r3, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d110      	bne.n	8000cc4 <CAN_Receive_IT+0x19c>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	68d2      	ldr	r2, [r2, #12]
 8000cac:	f042 0220 	orr.w	r2, r2, #32
 8000cb0:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	6812      	ldr	r2, [r2, #0]
 8000cba:	6952      	ldr	r2, [r2, #20]
 8000cbc:	f022 0202 	bic.w	r2, r2, #2
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	e00f      	b.n	8000ce4 <CAN_Receive_IT+0x1bc>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	6912      	ldr	r2, [r2, #16]
 8000cce:	f042 0220 	orr.w	r2, r2, #32
 8000cd2:	611a      	str	r2, [r3, #16]
    
    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	6952      	ldr	r2, [r2, #20]
 8000cde:	f022 0210 	bic.w	r2, r2, #16
 8000ce2:	615a      	str	r2, [r3, #20]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b22      	cmp	r3, #34	; 0x22
 8000cee:	d107      	bne.n	8000d00 <CAN_Receive_IT+0x1d8>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	6952      	ldr	r2, [r2, #20]
 8000cfa:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000cfe:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b32      	cmp	r3, #50	; 0x32
 8000d0a:	d104      	bne.n	8000d16 <CAN_Receive_IT+0x1ee>
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2212      	movs	r2, #18
 8000d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000d14:	e003      	b.n	8000d1e <CAN_Receive_IT+0x1f6>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f002 fb42 	bl	80033a8 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop

08000d30 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d84:	0a1b      	lsrs	r3, r3, #8
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <NVIC_EnableIRQ+0x2c>)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	095b      	lsrs	r3, r3, #5
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	f002 021f 	and.w	r2, r2, #31
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	da0b      	bge.n	8000df0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	490d      	ldr	r1, [pc, #52]	; (8000e10 <NVIC_SetPriority+0x4c>)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 030f 	and.w	r3, r3, #15
 8000de0:	3b04      	subs	r3, #4
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dee:	e009      	b.n	8000e04 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	4908      	ldr	r1, [pc, #32]	; (8000e14 <NVIC_SetPriority+0x50>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	401a      	ands	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5e:	2101      	movs	r1, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	1e59      	subs	r1, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000e6c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff92 	bl	8000dc4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff33 	bl	8000d30 <NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop

08000ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee6:	f7ff ff47 	bl	8000d78 <NVIC_GetPriorityGrouping>
 8000eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f7ff ff91 	bl	8000e18 <NVIC_EncodePriority>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff60 	bl	8000dc4 <NVIC_SetPriority>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff3a 	bl	8000d94 <NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffa1 	bl	8000e78 <SysTick_Config>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d106      	bne.n	8000f5c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000f5a:	e005      	b.n	8000f68 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f5c:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 0304 	bic.w	r3, r3, #4
 8000f66:	6013      	str	r3, [r2, #0]
  }
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000f7c:	f000 f802 	bl	8000f84 <HAL_SYSTICK_Callback>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b08b      	sub	sp, #44	; 0x2c
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb2:	e127      	b.n	8001204 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 8116 	bne.w	80011fe <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b12      	cmp	r3, #18
 8000fd8:	d034      	beq.n	8001044 <HAL_GPIO_Init+0xb4>
 8000fda:	2b12      	cmp	r3, #18
 8000fdc:	d80d      	bhi.n	8000ffa <HAL_GPIO_Init+0x6a>
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d02b      	beq.n	800103a <HAL_GPIO_Init+0xaa>
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d804      	bhi.n	8000ff0 <HAL_GPIO_Init+0x60>
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d031      	beq.n	800104e <HAL_GPIO_Init+0xbe>
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d01c      	beq.n	8001028 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000fee:	e048      	b.n	8001082 <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d043      	beq.n	800107c <HAL_GPIO_Init+0xec>
 8000ff4:	2b11      	cmp	r3, #17
 8000ff6:	d01b      	beq.n	8001030 <HAL_GPIO_Init+0xa0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000ff8:	e043      	b.n	8001082 <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ffa:	4a87      	ldr	r2, [pc, #540]	; (8001218 <HAL_GPIO_Init+0x288>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d026      	beq.n	800104e <HAL_GPIO_Init+0xbe>
 8001000:	4a85      	ldr	r2, [pc, #532]	; (8001218 <HAL_GPIO_Init+0x288>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d806      	bhi.n	8001014 <HAL_GPIO_Init+0x84>
 8001006:	4a85      	ldr	r2, [pc, #532]	; (800121c <HAL_GPIO_Init+0x28c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d020      	beq.n	800104e <HAL_GPIO_Init+0xbe>
 800100c:	4a84      	ldr	r2, [pc, #528]	; (8001220 <HAL_GPIO_Init+0x290>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d01d      	beq.n	800104e <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8001012:	e036      	b.n	8001082 <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001014:	4a83      	ldr	r2, [pc, #524]	; (8001224 <HAL_GPIO_Init+0x294>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d019      	beq.n	800104e <HAL_GPIO_Init+0xbe>
 800101a:	4a83      	ldr	r2, [pc, #524]	; (8001228 <HAL_GPIO_Init+0x298>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d016      	beq.n	800104e <HAL_GPIO_Init+0xbe>
 8001020:	4a82      	ldr	r2, [pc, #520]	; (800122c <HAL_GPIO_Init+0x29c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8001026:	e02c      	b.n	8001082 <HAL_GPIO_Init+0xf2>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e028      	b.n	8001082 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	3304      	adds	r3, #4
 8001036:	623b      	str	r3, [r7, #32]
          break;
 8001038:	e023      	b.n	8001082 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	3308      	adds	r3, #8
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e01e      	b.n	8001082 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	330c      	adds	r3, #12
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e019      	b.n	8001082 <HAL_GPIO_Init+0xf2>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <HAL_GPIO_Init+0xcc>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001056:	2304      	movs	r3, #4
 8001058:	623b      	str	r3, [r7, #32]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
          }
          break; 
 800105a:	e012      	b.n	8001082 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d105      	bne.n	8001070 <HAL_GPIO_Init+0xe0>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	611a      	str	r2, [r3, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
          }
          break; 
 800106e:	e008      	b.n	8001082 <HAL_GPIO_Init+0xf2>
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	615a      	str	r2, [r3, #20]
          }
          break; 
 800107a:	e002      	b.n	8001082 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	bf00      	nop
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2bff      	cmp	r3, #255	; 0xff
 8001086:	d801      	bhi.n	800108c <HAL_GPIO_Init+0xfc>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	e001      	b.n	8001090 <HAL_GPIO_Init+0x100>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3304      	adds	r3, #4
 8001090:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2bff      	cmp	r3, #255	; 0xff
 8001096:	d802      	bhi.n	800109e <HAL_GPIO_Init+0x10e>
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x114>
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	3b08      	subs	r3, #8
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	210f      	movs	r1, #15
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	401a      	ands	r2, r3
 80010b6:	6a39      	ldr	r1, [r7, #32]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	431a      	orrs	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8096 	beq.w	80011fe <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d2:	4a57      	ldr	r2, [pc, #348]	; (8001230 <HAL_GPIO_Init+0x2a0>)
 80010d4:	4b56      	ldr	r3, [pc, #344]	; (8001230 <HAL_GPIO_Init+0x2a0>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6193      	str	r3, [r2, #24]
 80010de:	4b54      	ldr	r3, [pc, #336]	; (8001230 <HAL_GPIO_Init+0x2a0>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 80010ea:	4a52      	ldr	r2, [pc, #328]	; (8001234 <HAL_GPIO_Init+0x2a4>)
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	4013      	ands	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a49      	ldr	r2, [pc, #292]	; (8001238 <HAL_GPIO_Init+0x2a8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0x1ae>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a48      	ldr	r2, [pc, #288]	; (800123c <HAL_GPIO_Init+0x2ac>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d00d      	beq.n	800113a <HAL_GPIO_Init+0x1aa>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a47      	ldr	r2, [pc, #284]	; (8001240 <HAL_GPIO_Init+0x2b0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d007      	beq.n	8001136 <HAL_GPIO_Init+0x1a6>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a46      	ldr	r2, [pc, #280]	; (8001244 <HAL_GPIO_Init+0x2b4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_GPIO_Init+0x1a2>
 800112e:	2303      	movs	r3, #3
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x1b0>
 8001132:	2304      	movs	r3, #4
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x1b0>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x1b0>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x1b0>
 800113e:	2300      	movs	r3, #0
 8001140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001142:	f002 0203 	and.w	r2, r2, #3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4313      	orrs	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8001150:	4938      	ldr	r1, [pc, #224]	; (8001234 <HAL_GPIO_Init+0x2a4>)
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800116a:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 800116c:	4b36      	ldr	r3, [pc, #216]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
 8001176:	e006      	b.n	8001186 <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8001178:	4933      	ldr	r1, [pc, #204]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	4013      	ands	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001192:	492d      	ldr	r1, [pc, #180]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	604b      	str	r3, [r1, #4]
 800119e:	e006      	b.n	80011ae <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80011a0:	4929      	ldr	r1, [pc, #164]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4013      	ands	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80011ba:	4923      	ldr	r1, [pc, #140]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	608b      	str	r3, [r1, #8]
 80011c6:	e006      	b.n	80011d6 <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80011c8:	491f      	ldr	r1, [pc, #124]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4013      	ands	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80011e2:	4919      	ldr	r1, [pc, #100]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60cb      	str	r3, [r1, #12]
 80011ee:	e006      	b.n	80011fe <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80011f0:	4915      	ldr	r1, [pc, #84]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	4013      	ands	r3, r2
 80011fc:	60cb      	str	r3, [r1, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3301      	adds	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f aed4 	bls.w	8000fb4 <HAL_GPIO_Init+0x24>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	372c      	adds	r7, #44	; 0x2c
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	10210000 	.word	0x10210000
 800121c:	10110000 	.word	0x10110000
 8001220:	10120000 	.word	0x10120000
 8001224:	10310000 	.word	0x10310000
 8001228:	10320000 	.word	0x10320000
 800122c:	10220000 	.word	0x10220000
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00
 8001240:	40011000 	.word	0x40011000
 8001244:	40011400 	.word	0x40011400
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	611a      	str	r2, [r3, #16]
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b0e5      	sub	sp, #404	; 0x194
 8001280:	af00      	add	r7, sp, #0
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8175 	beq.w	8001586 <HAL_RCC_OscConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800129c:	4bb8      	ldr	r3, [pc, #736]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d00b      	beq.n	80012c0 <HAL_RCC_OscConfig+0x44>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a8:	4bb5      	ldr	r3, [pc, #724]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d15f      	bne.n	8001374 <HAL_RCC_OscConfig+0xf8>
 80012b4:	4bb2      	ldr	r3, [pc, #712]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d059      	beq.n	8001374 <HAL_RCC_OscConfig+0xf8>
 80012c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	fab3 f383 	clz	r3, r3
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	f043 0320 	orr.w	r3, r3, #32
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <HAL_RCC_OscConfig+0x78>
 80012ee:	4ba4      	ldr	r3, [pc, #656]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	e01b      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 80012f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b25b      	sxtb	r3, r3
 8001312:	f043 0320 	orr.w	r3, r3, #32
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d102      	bne.n	8001328 <HAL_RCC_OscConfig+0xac>
 8001322:	4b97      	ldr	r3, [pc, #604]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	e001      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 8001328:	4b95      	ldr	r3, [pc, #596]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001330:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001338:	fa92 f2a2 	rbit	r2, r2
 800133c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001344:	fab2 f282 	clz	r2, r2
 8001348:	b252      	sxtb	r2, r2
 800134a:	f042 0220 	orr.w	r2, r2, #32
 800134e:	b252      	sxtb	r2, r2
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	f002 021f 	and.w	r2, r2, #31
 8001356:	40d3      	lsrs	r3, r2
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8111 	beq.w	8001584 <HAL_RCC_OscConfig+0x308>
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	f040 810b 	bne.w	8001584 <HAL_RCC_OscConfig+0x308>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	f000 be9d 	b.w	80020ae <HAL_RCC_OscConfig+0xe32>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x112>
 8001380:	4a7f      	ldr	r2, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 8001382:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e030      	b.n	80013f0 <HAL_RCC_OscConfig+0x174>
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10c      	bne.n	80013b2 <HAL_RCC_OscConfig+0x136>
 8001398:	4a79      	ldr	r2, [pc, #484]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 800139a:	4b79      	ldr	r3, [pc, #484]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4a76      	ldr	r2, [pc, #472]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013a6:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	e01e      	b.n	80013f0 <HAL_RCC_OscConfig+0x174>
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x15c>
 80013be:	4a70      	ldr	r2, [pc, #448]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013c0:	4b6f      	ldr	r3, [pc, #444]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4a6d      	ldr	r2, [pc, #436]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013cc:	4b6c      	ldr	r3, [pc, #432]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e00b      	b.n	80013f0 <HAL_RCC_OscConfig+0x174>
 80013d8:	4a69      	ldr	r2, [pc, #420]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013da:	4b69      	ldr	r3, [pc, #420]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4a66      	ldr	r2, [pc, #408]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013e6:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d060      	beq.n	80014bc <HAL_RCC_OscConfig+0x240>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7fe fee7 	bl	80001cc <HAL_GetTick>
 80013fe:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001404:	f7fe fee2 	bl	80001cc <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	d902      	bls.n	800141a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	f000 be4a 	b.w	80020ae <HAL_RCC_OscConfig+0xe32>
 800141a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001426:	fa93 f3a3 	rbit	r3, r3
 800142a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800142e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	b25b      	sxtb	r3, r3
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	b25b      	sxtb	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	095b      	lsrs	r3, r3, #5
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d102      	bne.n	800144e <HAL_RCC_OscConfig+0x1d2>
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	e01b      	b.n	8001486 <HAL_RCC_OscConfig+0x20a>
 800144e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001452:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b25b      	sxtb	r3, r3
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	b25b      	sxtb	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	095b      	lsrs	r3, r3, #5
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d102      	bne.n	8001482 <HAL_RCC_OscConfig+0x206>
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	e001      	b.n	8001486 <HAL_RCC_OscConfig+0x20a>
 8001482:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800148a:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001492:	fa92 f2a2 	rbit	r2, r2
 8001496:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800149a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800149e:	fab2 f282 	clz	r2, r2
 80014a2:	b252      	sxtb	r2, r2
 80014a4:	f042 0220 	orr.w	r2, r2, #32
 80014a8:	b252      	sxtb	r2, r2
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	f002 021f 	and.w	r2, r2, #31
 80014b0:	40d3      	lsrs	r3, r2
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0a4      	beq.n	8001404 <HAL_RCC_OscConfig+0x188>
 80014ba:	e064      	b.n	8001586 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7fe fe86 	bl	80001cc <HAL_GetTick>
 80014c0:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x260>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c6:	f7fe fe81 	bl	80001cc <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d902      	bls.n	80014dc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f000 bde9 	b.w	80020ae <HAL_RCC_OscConfig+0xe32>
 80014dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	f043 0320 	orr.w	r3, r3, #32
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <HAL_RCC_OscConfig+0x294>
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	e01b      	b.n	8001548 <HAL_RCC_OscConfig+0x2cc>
 8001510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001514:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	b25b      	sxtb	r3, r3
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	b25b      	sxtb	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d102      	bne.n	8001544 <HAL_RCC_OscConfig+0x2c8>
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	e001      	b.n	8001548 <HAL_RCC_OscConfig+0x2cc>
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_RCC_OscConfig+0x304>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800154c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001554:	fa92 f2a2 	rbit	r2, r2
 8001558:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800155c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001560:	fab2 f282 	clz	r2, r2
 8001564:	b252      	sxtb	r2, r2
 8001566:	f042 0220 	orr.w	r2, r2, #32
 800156a:	b252      	sxtb	r2, r2
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	f002 021f 	and.w	r2, r2, #31
 8001572:	40d3      	lsrs	r3, r2
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1a4      	bne.n	80014c6 <HAL_RCC_OscConfig+0x24a>
 800157c:	e003      	b.n	8001586 <HAL_RCC_OscConfig+0x30a>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8198 	beq.w	80018c6 <HAL_RCC_OscConfig+0x64a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001596:	4bbc      	ldr	r3, [pc, #752]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <HAL_RCC_OscConfig+0x33e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015a2:	4bb9      	ldr	r3, [pc, #740]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d174      	bne.n	8001698 <HAL_RCC_OscConfig+0x41c>
 80015ae:	4bb6      	ldr	r3, [pc, #728]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d16e      	bne.n	8001698 <HAL_RCC_OscConfig+0x41c>
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80015c4:	fa93 f3a3 	rbit	r3, r3
 80015c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d102      	bne.n	80015ec <HAL_RCC_OscConfig+0x370>
 80015e6:	4ba8      	ldr	r3, [pc, #672]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	e01a      	b.n	8001622 <HAL_RCC_OscConfig+0x3a6>
 80015ec:	2302      	movs	r3, #2
 80015ee:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80015f6:	fa93 f3a3 	rbit	r3, r3
 80015fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b25b      	sxtb	r3, r3
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	b25b      	sxtb	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	095b      	lsrs	r3, r3, #5
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0x3a2>
 8001618:	4b9b      	ldr	r3, [pc, #620]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	e001      	b.n	8001622 <HAL_RCC_OscConfig+0x3a6>
 800161e:	4b9a      	ldr	r3, [pc, #616]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	2202      	movs	r2, #2
 8001624:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800162c:	fa92 f2a2 	rbit	r2, r2
 8001630:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001634:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001638:	fab2 f282 	clz	r2, r2
 800163c:	b252      	sxtb	r2, r2
 800163e:	f042 0220 	orr.w	r2, r2, #32
 8001642:	b252      	sxtb	r2, r2
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	f002 021f 	and.w	r2, r2, #31
 800164a:	40d3      	lsrs	r3, r2
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <HAL_RCC_OscConfig+0x3e8>
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d002      	beq.n	8001664 <HAL_RCC_OscConfig+0x3e8>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	f000 bd25 	b.w	80020ae <HAL_RCC_OscConfig+0xe32>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4888      	ldr	r0, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 8001666:	4b88      	ldr	r3, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6959      	ldr	r1, [r3, #20]
 8001674:	23f8      	movs	r3, #248	; 0xf8
 8001676:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001686:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	e116      	b.n	80018c6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8094 	beq.w	80017cc <HAL_RCC_OscConfig+0x550>
 80016a4:	2301      	movs	r3, #1
 80016a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80016c4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80016c8:	461a      	mov	r2, r3
 80016ca:	2301      	movs	r3, #1
 80016cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7fe fd7d 	bl	80001cc <HAL_GetTick>
 80016d2:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d8:	f7fe fd78 	bl	80001cc <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d902      	bls.n	80016ee <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f000 bce0 	b.w	80020ae <HAL_RCC_OscConfig+0xe32>
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001700:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001702:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001706:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f043 0320 	orr.w	r3, r3, #32
 8001712:	b25b      	sxtb	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d102      	bne.n	8001724 <HAL_RCC_OscConfig+0x4a8>
 800171e:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	e01c      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
 8001724:	2302      	movs	r3, #2
 8001726:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001736:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001738:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	095b      	lsrs	r3, r3, #5
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d102      	bne.n	800175a <HAL_RCC_OscConfig+0x4de>
 8001754:	4b4c      	ldr	r3, [pc, #304]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	e001      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
 800175a:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	2202      	movs	r2, #2
 8001760:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001768:	fa92 f1a2 	rbit	r1, r2
 800176c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001770:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001772:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	fab2 f282 	clz	r2, r2
 800177c:	b252      	sxtb	r2, r2
 800177e:	f042 0220 	orr.w	r2, r2, #32
 8001782:	b252      	sxtb	r2, r2
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	f002 021f 	and.w	r2, r2, #31
 800178a:	40d3      	lsrs	r3, r2
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0a1      	beq.n	80016d8 <HAL_RCC_OscConfig+0x45c>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	4c3c      	ldr	r4, [pc, #240]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6959      	ldr	r1, [r3, #20]
 80017a4:	23f8      	movs	r3, #248	; 0xf8
 80017a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017ae:	fa93 f0a3 	rbit	r0, r3
 80017b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017b6:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	6023      	str	r3, [r4, #0]
 80017ca:	e07c      	b.n	80018c6 <HAL_RCC_OscConfig+0x64a>
 80017cc:	2301      	movs	r3, #1
 80017ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80017d6:	fa93 f2a3 	rbit	r2, r3
 80017da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017de:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017e4:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80017f0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80017f4:	461a      	mov	r2, r3
 80017f6:	2300      	movs	r3, #0
 80017f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7fe fce7 	bl	80001cc <HAL_GetTick>
 80017fe:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e00a      	b.n	800181a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001804:	f7fe fce2 	bl	80001cc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d902      	bls.n	800181a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	f000 bc4a 	b.w	80020ae <HAL_RCC_OscConfig+0xe32>
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001824:	fa93 f2a3 	rbit	r2, r3
 8001828:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800182c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800182e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001832:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b25b      	sxtb	r3, r3
 800183a:	f043 0320 	orr.w	r3, r3, #32
 800183e:	b25b      	sxtb	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <HAL_RCC_OscConfig+0x5d4>
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e01f      	b.n	8001890 <HAL_RCC_OscConfig+0x614>
 8001850:	2302      	movs	r3, #2
 8001852:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001862:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001864:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f043 0320 	orr.w	r3, r3, #32
 8001874:	b25b      	sxtb	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x610>
 8001880:	4b01      	ldr	r3, [pc, #4]	; (8001888 <HAL_RCC_OscConfig+0x60c>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	e004      	b.n	8001890 <HAL_RCC_OscConfig+0x614>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	4bb7      	ldr	r3, [pc, #732]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	2202      	movs	r2, #2
 8001892:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800189a:	fa92 f1a2 	rbit	r1, r2
 800189e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80018a2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018a4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	fab2 f282 	clz	r2, r2
 80018ae:	b252      	sxtb	r2, r2
 80018b0:	f042 0220 	orr.w	r2, r2, #32
 80018b4:	b252      	sxtb	r2, r2
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f002 021f 	and.w	r2, r2, #31
 80018bc:	40d3      	lsrs	r3, r2
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d19e      	bne.n	8001804 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80f9 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d07b      	beq.n	80019d8 <HAL_RCC_OscConfig+0x75c>
 80018e0:	2301      	movs	r3, #1
 80018e2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80018ea:	fa93 f2a3 	rbit	r2, r3
 80018ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018f2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018f8:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	461a      	mov	r2, r3
 8001902:	4b9b      	ldr	r3, [pc, #620]	; (8001b70 <HAL_RCC_OscConfig+0x8f4>)
 8001904:	4413      	add	r3, r2
 8001906:	461a      	mov	r2, r3
 8001908:	2301      	movs	r3, #1
 800190a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7fe fc5e 	bl	80001cc <HAL_GetTick>
 8001910:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001914:	e009      	b.n	800192a <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001916:	f7fe fc59 	bl	80001cc <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e3c1      	b.n	80020ae <HAL_RCC_OscConfig+0xe32>
 800192a:	2302      	movs	r3, #2
 800192c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800193c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800193e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001942:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b25b      	sxtb	r3, r3
 800194a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800194e:	b25b      	sxtb	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <HAL_RCC_OscConfig+0x6e4>
 800195a:	4b84      	ldr	r3, [pc, #528]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e01c      	b.n	800199a <HAL_RCC_OscConfig+0x71e>
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001972:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001974:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b25b      	sxtb	r3, r3
 8001980:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001984:	b25b      	sxtb	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	095b      	lsrs	r3, r3, #5
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d102      	bne.n	8001996 <HAL_RCC_OscConfig+0x71a>
 8001990:	4b76      	ldr	r3, [pc, #472]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	e001      	b.n	800199a <HAL_RCC_OscConfig+0x71e>
 8001996:	4b75      	ldr	r3, [pc, #468]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2202      	movs	r2, #2
 800199c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80019a4:	fa92 f1a2 	rbit	r1, r2
 80019a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80019ac:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019ae:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	fab2 f282 	clz	r2, r2
 80019b8:	b252      	sxtb	r2, r2
 80019ba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80019be:	b252      	sxtb	r2, r2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f002 021f 	and.w	r2, r2, #31
 80019c6:	40d3      	lsrs	r3, r2
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0a2      	beq.n	8001916 <HAL_RCC_OscConfig+0x69a>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7fe fc05 	bl	80001e0 <HAL_Delay>
 80019d6:	e077      	b.n	8001ac8 <HAL_RCC_OscConfig+0x84c>
 80019d8:	2301      	movs	r3, #1
 80019da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019ea:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019f0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x8f4>)
 80019fc:	4413      	add	r3, r2
 80019fe:	461a      	mov	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7fe fbe2 	bl	80001cc <HAL_GetTick>
 8001a08:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	e009      	b.n	8001a22 <HAL_RCC_OscConfig+0x7a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7fe fbdd 	bl	80001cc <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x7a6>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e345      	b.n	80020ae <HAL_RCC_OscConfig+0xe32>
 8001a22:	2302      	movs	r3, #2
 8001a24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a34:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a3a:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d102      	bne.n	8001a58 <HAL_RCC_OscConfig+0x7dc>
 8001a52:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	e01c      	b.n	8001a92 <HAL_RCC_OscConfig+0x816>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a6a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	095b      	lsrs	r3, r3, #5
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d102      	bne.n	8001a8e <HAL_RCC_OscConfig+0x812>
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	e001      	b.n	8001a92 <HAL_RCC_OscConfig+0x816>
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2202      	movs	r2, #2
 8001a94:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a9c:	fa92 f1a2 	rbit	r1, r2
 8001aa0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001aa4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001aa6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	fab2 f282 	clz	r2, r2
 8001ab0:	b252      	sxtb	r2, r2
 8001ab2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001ab6:	b252      	sxtb	r2, r2
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	f002 021f 	and.w	r2, r2, #31
 8001abe:	40d3      	lsrs	r3, r2
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1a2      	bne.n	8001a0e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 813c 	beq.w	8001d50 <HAL_RCC_OscConfig+0xad4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	61d3      	str	r3, [r2, #28]
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	681b      	ldr	r3, [r3, #0]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af8:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_RCC_OscConfig+0x8f8>)
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_RCC_OscConfig+0x8f8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b04:	f7fe fb62 	bl	80001cc <HAL_GetTick>
 8001b08:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_OscConfig+0x8a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7fe fb5d 	bl	80001cc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x8a6>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e2c5      	b.n	80020ae <HAL_RCC_OscConfig+0xe32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_RCC_OscConfig+0x8f8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ef      	beq.n	8001b0e <HAL_RCC_OscConfig+0x892>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x8ca>
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e036      	b.n	8001bb4 <HAL_RCC_OscConfig+0x938>
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d113      	bne.n	8001b78 <HAL_RCC_OscConfig+0x8fc>
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001b5e:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_RCC_OscConfig+0x8f0>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f023 0304 	bic.w	r3, r3, #4
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e024      	b.n	8001bb4 <HAL_RCC_OscConfig+0x938>
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	42420480 	.word	0x42420480
 8001b74:	40007000 	.word	0x40007000
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x920>
 8001b82:	4aac      	ldr	r2, [pc, #688]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001b84:	4bab      	ldr	r3, [pc, #684]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4aa9      	ldr	r2, [pc, #676]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001b90:	4ba8      	ldr	r3, [pc, #672]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x938>
 8001b9c:	4aa5      	ldr	r2, [pc, #660]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001b9e:	4ba5      	ldr	r3, [pc, #660]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	4aa2      	ldr	r2, [pc, #648]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001baa:	4ba2      	ldr	r3, [pc, #648]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	f023 0304 	bic.w	r3, r3, #4
 8001bb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d064      	beq.n	8001c88 <HAL_RCC_OscConfig+0xa0c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7fe fb05 	bl	80001cc <HAL_GetTick>
 8001bc2:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x964>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe fb00 	bl	80001cc <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x964>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e266      	b.n	80020ae <HAL_RCC_OscConfig+0xe32>
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bea:	fa93 f2a3 	rbit	r2, r3
 8001bee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bf2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bf4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bf8:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	095b      	lsrs	r3, r3, #5
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_OscConfig+0x99a>
 8001c10:	4b88      	ldr	r3, [pc, #544]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e01c      	b.n	8001c50 <HAL_RCC_OscConfig+0x9d4>
 8001c16:	2302      	movs	r3, #2
 8001c18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c28:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0x9d0>
 8001c46:	4b7b      	ldr	r3, [pc, #492]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	e001      	b.n	8001c50 <HAL_RCC_OscConfig+0x9d4>
 8001c4c:	4b79      	ldr	r3, [pc, #484]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	2202      	movs	r2, #2
 8001c52:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001c5a:	fa92 f1a2 	rbit	r1, r2
 8001c5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001c62:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	fab2 f282 	clz	r2, r2
 8001c6e:	b252      	sxtb	r2, r2
 8001c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c74:	b252      	sxtb	r2, r2
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	f002 021f 	and.w	r2, r2, #31
 8001c7c:	40d3      	lsrs	r3, r2
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0a0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x94c>
 8001c86:	e063      	b.n	8001d50 <HAL_RCC_OscConfig+0xad4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7fe faa0 	bl	80001cc <HAL_GetTick>
 8001c8c:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c90:	e00b      	b.n	8001caa <HAL_RCC_OscConfig+0xa2e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7fe fa9b 	bl	80001cc <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xa2e>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e201      	b.n	80020ae <HAL_RCC_OscConfig+0xe32>
 8001caa:	2302      	movs	r3, #2
 8001cac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cbc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cc2:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xa64>
 8001cda:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e01c      	b.n	8001d1a <HAL_RCC_OscConfig+0xa9e>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_OscConfig+0xa9a>
 8001d10:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	e001      	b.n	8001d1a <HAL_RCC_OscConfig+0xa9e>
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001d24:	fa92 f1a2 	rbit	r1, r2
 8001d28:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d2c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d2e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b252      	sxtb	r2, r2
 8001d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3e:	b252      	sxtb	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f002 021f 	and.w	r2, r2, #31
 8001d46:	40d3      	lsrs	r3, r2
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1a0      	bne.n	8001c92 <HAL_RCC_OscConfig+0xa16>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 81a8 	beq.w	80020ac <HAL_RCC_OscConfig+0xe30>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5c:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	f000 819f 	beq.w	80020a8 <HAL_RCC_OscConfig+0xe2c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	f040 811b 	bne.w	8001fac <HAL_RCC_OscConfig+0xd30>
 8001d76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d8a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d90:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001d9c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001da0:	461a      	mov	r2, r3
 8001da2:	2300      	movs	r3, #0
 8001da4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe fa11 	bl	80001cc <HAL_GetTick>
 8001daa:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	e009      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb48>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe fa0c 	bl	80001cc <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0xb48>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e174      	b.n	80020ae <HAL_RCC_OscConfig+0xe32>
 8001dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dd8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dde:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	f043 0320 	orr.w	r3, r3, #32
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_OscConfig+0xb80>
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	e01f      	b.n	8001e3c <HAL_RCC_OscConfig+0xbc0>
 8001dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e10:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	f043 0320 	orr.w	r3, r3, #32
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d104      	bne.n	8001e38 <HAL_RCC_OscConfig+0xbbc>
 8001e2e:	4b01      	ldr	r3, [pc, #4]	; (8001e34 <HAL_RCC_OscConfig+0xbb8>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	e003      	b.n	8001e3c <HAL_RCC_OscConfig+0xbc0>
 8001e34:	40021000 	.word	0x40021000
 8001e38:	4b9f      	ldr	r3, [pc, #636]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e40:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001e48:	fa92 f1a2 	rbit	r1, r2
 8001e4c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001e50:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e52:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b252      	sxtb	r2, r2
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	b252      	sxtb	r2, r2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f002 021f 	and.w	r2, r2, #31
 8001e6a:	40d3      	lsrs	r3, r2
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d19d      	bne.n	8001db0 <HAL_RCC_OscConfig+0xb34>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7e:	d109      	bne.n	8001e94 <HAL_RCC_OscConfig+0xc18>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e80:	498d      	ldr	r1, [pc, #564]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 8001e82:	4b8d      	ldr	r3, [pc, #564]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e94:	4888      	ldr	r0, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 8001e96:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a19      	ldr	r1, [r3, #32]
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	4313      	orrs	r3, r2
 8001eae:	6043      	str	r3, [r0, #4]
 8001eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eca:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ed6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001eda:	461a      	mov	r2, r3
 8001edc:	2301      	movs	r3, #1
 8001ede:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe f974 	bl	80001cc <HAL_GetTick>
 8001ee4:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	e009      	b.n	8001efe <HAL_RCC_OscConfig+0xc82>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe f96f 	bl	80001cc <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xc82>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0d7      	b.n	80020ae <HAL_RCC_OscConfig+0xe32>
 8001efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f18:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	f043 0320 	orr.w	r3, r3, #32
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <HAL_RCC_OscConfig+0xcba>
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	e01d      	b.n	8001f72 <HAL_RCC_OscConfig+0xcf6>
 8001f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f42:	fa93 f2a3 	rbit	r2, r3
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b25b      	sxtb	r3, r3
 8001f58:	f043 0320 	orr.w	r3, r3, #32
 8001f5c:	b25b      	sxtb	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d102      	bne.n	8001f6e <HAL_RCC_OscConfig+0xcf2>
 8001f68:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	e001      	b.n	8001f72 <HAL_RCC_OscConfig+0xcf6>
 8001f6e:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f76:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f7e:	fa92 f1a2 	rbit	r1, r2
 8001f82:	f107 021c 	add.w	r2, r7, #28
 8001f86:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f88:	f107 021c 	add.w	r2, r7, #28
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	fab2 f282 	clz	r2, r2
 8001f92:	b252      	sxtb	r2, r2
 8001f94:	f042 0220 	orr.w	r2, r2, #32
 8001f98:	b252      	sxtb	r2, r2
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	40d3      	lsrs	r3, r2
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d09f      	beq.n	8001eea <HAL_RCC_OscConfig+0xc6e>
 8001faa:	e07f      	b.n	80020ac <HAL_RCC_OscConfig+0xe30>
 8001fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fb8:	fa93 f2a3 	rbit	r2, r3
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fc2:	f107 0318 	add.w	r3, r7, #24
 8001fc6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001fd2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe f8f6 	bl	80001cc <HAL_GetTick>
 8001fe0:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe4:	e009      	b.n	8001ffa <HAL_RCC_OscConfig+0xd7e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe f8f1 	bl	80001cc <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xd7e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e059      	b.n	80020ae <HAL_RCC_OscConfig+0xe32>
 8001ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b25b      	sxtb	r3, r3
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	b25b      	sxtb	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d102      	bne.n	8002032 <HAL_RCC_OscConfig+0xdb6>
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e01d      	b.n	800206e <HAL_RCC_OscConfig+0xdf2>
 8002032:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800203e:	fa93 f2a3 	rbit	r2, r3
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b25b      	sxtb	r3, r3
 8002054:	f043 0320 	orr.w	r3, r3, #32
 8002058:	b25b      	sxtb	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d102      	bne.n	800206a <HAL_RCC_OscConfig+0xdee>
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	e001      	b.n	800206e <HAL_RCC_OscConfig+0xdf2>
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_RCC_OscConfig+0xe3c>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002072:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800207a:	fa92 f1a2 	rbit	r1, r2
 800207e:	f107 020c 	add.w	r2, r7, #12
 8002082:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002084:	f107 020c 	add.w	r2, r7, #12
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b252      	sxtb	r2, r2
 8002090:	f042 0220 	orr.w	r2, r2, #32
 8002094:	b252      	sxtb	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	40d3      	lsrs	r3, r2
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d19f      	bne.n	8001fe6 <HAL_RCC_OscConfig+0xd6a>
 80020a6:	e001      	b.n	80020ac <HAL_RCC_OscConfig+0xe30>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0xe32>
    }
  }
  
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b098      	sub	sp, #96	; 0x60
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80020ca:	4ba5      	ldr	r3, [pc, #660]	; (8002360 <HAL_RCC_ClockConfig+0x2a4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0207 	and.w	r2, r3, #7
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d210      	bcs.n	80020fa <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d8:	49a1      	ldr	r1, [pc, #644]	; (8002360 <HAL_RCC_ClockConfig+0x2a4>)
 80020da:	4ba1      	ldr	r3, [pc, #644]	; (8002360 <HAL_RCC_ClockConfig+0x2a4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020e8:	4b9d      	ldr	r3, [pc, #628]	; (8002360 <HAL_RCC_ClockConfig+0x2a4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0207 	and.w	r2, r3, #7
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e18f      	b.n	800241a <HAL_RCC_ClockConfig+0x35e>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002106:	4997      	ldr	r1, [pc, #604]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 8002108:	4b96      	ldr	r3, [pc, #600]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8127 	beq.w	8002374 <HAL_RCC_ClockConfig+0x2b8>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d146      	bne.n	80021bc <HAL_RCC_ClockConfig+0x100>
 800212e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b25b      	sxtb	r3, r3
 8002144:	f043 0320 	orr.w	r3, r3, #32
 8002148:	b25b      	sxtb	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_RCC_ClockConfig+0x9e>
 8002154:	4b83      	ldr	r3, [pc, #524]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e017      	b.n	800218a <HAL_RCC_ClockConfig+0xce>
 800215a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215e:	65bb      	str	r3, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b25b      	sxtb	r3, r3
 8002170:	f043 0320 	orr.w	r3, r3, #32
 8002174:	b25b      	sxtb	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d102      	bne.n	8002186 <HAL_RCC_ClockConfig+0xca>
 8002180:	4b78      	ldr	r3, [pc, #480]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	e001      	b.n	800218a <HAL_RCC_ClockConfig+0xce>
 8002186:	4b77      	ldr	r3, [pc, #476]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800218e:	657a      	str	r2, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002192:	fa92 f2a2 	rbit	r2, r2
 8002196:	62ba      	str	r2, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800219a:	fab2 f282 	clz	r2, r2
 800219e:	b252      	sxtb	r2, r2
 80021a0:	f042 0220 	orr.w	r2, r2, #32
 80021a4:	b252      	sxtb	r2, r2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f002 021f 	and.w	r2, r2, #31
 80021ac:	40d3      	lsrs	r3, r2
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 808f 	bne.w	80022d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e12e      	b.n	800241a <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d145      	bne.n	8002250 <HAL_RCC_ClockConfig+0x194>
 80021c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c8:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	f043 0320 	orr.w	r3, r3, #32
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x134>
 80021ea:	4b5e      	ldr	r3, [pc, #376]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e017      	b.n	8002220 <HAL_RCC_ClockConfig+0x164>
 80021f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f4:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b25b      	sxtb	r3, r3
 8002206:	f043 0320 	orr.w	r3, r3, #32
 800220a:	b25b      	sxtb	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d102      	bne.n	800221c <HAL_RCC_ClockConfig+0x160>
 8002216:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	e001      	b.n	8002220 <HAL_RCC_ClockConfig+0x164>
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002224:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002228:	fa92 f2a2 	rbit	r2, r2
 800222c:	61fa      	str	r2, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	fab2 f282 	clz	r2, r2
 8002234:	b252      	sxtb	r2, r2
 8002236:	f042 0220 	orr.w	r2, r2, #32
 800223a:	b252      	sxtb	r2, r2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	f002 021f 	and.w	r2, r2, #31
 8002242:	40d3      	lsrs	r3, r2
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d144      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0e4      	b.n	800241a <HAL_RCC_ClockConfig+0x35e>
 8002250:	2302      	movs	r3, #2
 8002252:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800225c:	69bb      	ldr	r3, [r7, #24]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b25b      	sxtb	r3, r3
 8002264:	f043 0320 	orr.w	r3, r3, #32
 8002268:	b25b      	sxtb	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d102      	bne.n	800227a <HAL_RCC_ClockConfig+0x1be>
 8002274:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	e016      	b.n	80022a8 <HAL_RCC_ClockConfig+0x1ec>
 800227a:	2302      	movs	r3, #2
 800227c:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b25b      	sxtb	r3, r3
 800228e:	f043 0320 	orr.w	r3, r3, #32
 8002292:	b25b      	sxtb	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	e001      	b.n	80022a8 <HAL_RCC_ClockConfig+0x1ec>
 80022a4:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2202      	movs	r2, #2
 80022aa:	63fa      	str	r2, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ae:	fa92 f2a2 	rbit	r2, r2
 80022b2:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b252      	sxtb	r2, r2
 80022bc:	f042 0220 	orr.w	r2, r2, #32
 80022c0:	b252      	sxtb	r2, r2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f002 021f 	and.w	r2, r2, #31
 80022c8:	40d3      	lsrs	r3, r2
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0a1      	b.n	800241a <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4923      	ldr	r1, [pc, #140]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 0203 	bic.w	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7fd ff70 	bl	80001cc <HAL_GetTick>
 80022ec:	65f8      	str	r0, [r7, #92]	; 0x5c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d112      	bne.n	800231c <HAL_RCC_ClockConfig+0x260>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x252>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7fd ff68 	bl	80001cc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x252>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e085      	b.n	800241a <HAL_RCC_ClockConfig+0x35e>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b04      	cmp	r3, #4
 8002318:	d1ee      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x23c>
 800231a:	e02b      	b.n	8002374 <HAL_RCC_ClockConfig+0x2b8>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d121      	bne.n	8002368 <HAL_RCC_ClockConfig+0x2ac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002324:	e00a      	b.n	800233c <HAL_RCC_ClockConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002326:	f7fd ff51 	bl	80001cc <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_ClockConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e06e      	b.n	800241a <HAL_RCC_ClockConfig+0x35e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x2a8>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d1ee      	bne.n	8002326 <HAL_RCC_ClockConfig+0x26a>
 8002348:	e014      	b.n	8002374 <HAL_RCC_ClockConfig+0x2b8>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234a:	f7fd ff3f 	bl	80001cc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d905      	bls.n	8002368 <HAL_RCC_ClockConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e05c      	b.n	800241a <HAL_RCC_ClockConfig+0x35e>
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002368:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <HAL_RCC_ClockConfig+0x368>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ea      	bne.n	800234a <HAL_RCC_ClockConfig+0x28e>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002374:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <HAL_RCC_ClockConfig+0x36c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0207 	and.w	r2, r3, #7
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d910      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x2e8>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4929      	ldr	r1, [pc, #164]	; (8002428 <HAL_RCC_ClockConfig+0x36c>)
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_RCC_ClockConfig+0x36c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 0207 	bic.w	r2, r3, #7
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <HAL_RCC_ClockConfig+0x36c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0207 	and.w	r2, r3, #7
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x2e8>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e03a      	b.n	800241a <HAL_RCC_ClockConfig+0x35e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	491c      	ldr	r1, [pc, #112]	; (8002424 <HAL_RCC_ClockConfig+0x368>)
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <HAL_RCC_ClockConfig+0x368>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x326>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ce:	4915      	ldr	r1, [pc, #84]	; (8002424 <HAL_RCC_ClockConfig+0x368>)
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_RCC_ClockConfig+0x368>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023e2:	f000 f827 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023e6:	4601      	mov	r1, r0
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_RCC_ClockConfig+0x368>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023f0:	23f0      	movs	r3, #240	; 0xf0
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <HAL_RCC_ClockConfig+0x370>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	fa21 f303 	lsr.w	r3, r1, r3
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_RCC_ClockConfig+0x374>)
 8002410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002412:	2000      	movs	r0, #0
 8002414:	f7fd feb0 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3760      	adds	r7, #96	; 0x60
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	40022000 	.word	0x40022000
 800242c:	0800389c 	.word	0x0800389c
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	b490      	push	{r4, r7}
 8002436:	b08e      	sub	sp, #56	; 0x38
 8002438:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_RCC_GetSysClockFreq+0xe0>)
 800243c:	1d3c      	adds	r4, r7, #4
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8002448:	4a33      	ldr	r2, [pc, #204]	; (8002518 <HAL_RCC_GetSysClockFreq+0xe4>)
 800244a:	463b      	mov	r3, r7
 800244c:	8812      	ldrh	r2, [r2, #0]
 800244e:	801a      	strh	r2, [r3, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002454:	2300      	movs	r3, #0
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
 8002458:	2300      	movs	r3, #0
 800245a:	637b      	str	r3, [r7, #52]	; 0x34
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8002464:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b04      	cmp	r3, #4
 8002472:	d002      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x46>
 8002474:	2b08      	cmp	r3, #8
 8002476:	d003      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x4c>
 8002478:	e043      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_RCC_GetSysClockFreq+0xec>)
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800247e:	e043      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002486:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800248a:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024a2:	4413      	add	r3, r2
 80024a4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01e      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0xbe>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_GetSysClockFreq+0xe8>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80024bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c0:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
 80024d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024d8:	4413      	add	r3, r2
 80024da:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80024e0:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <HAL_RCC_GetSysClockFreq+0xec>)
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
 80024f0:	e004      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xc8>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80024fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002500:	e002      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_RCC_GetSysClockFreq+0xec>)
 8002504:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800250a:	4618      	mov	r0, r3
 800250c:	3738      	adds	r7, #56	; 0x38
 800250e:	46bd      	mov	sp, r7
 8002510:	bc90      	pop	{r4, r7}
 8002512:	4770      	bx	lr
 8002514:	08003888 	.word	0x08003888
 8002518:	08003898 	.word	0x08003898
 800251c:	40021000 	.word	0x40021000
 8002520:	007a1200 	.word	0x007a1200
 8002524:	003d0900 	.word	0x003d0900

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b02      	ldr	r3, [pc, #8]	; (8002538 <HAL_RCC_GetHCLKFreq+0x10>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002542:	f7ff fff1 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002546:	4601      	mov	r1, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002550:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002554:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_RCC_GetPCLK1Freq+0x40>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	080038ac 	.word	0x080038ac

08002580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002586:	f7ff ffcf 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 800258a:	4601      	mov	r1, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002594:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002598:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	080038ac 	.word	0x080038ac

080025c4 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e03b      	b.n	800264e <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f001 f8b4 	bl	8003758 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	68d2      	ldr	r2, [r2, #12]
 8002602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002606:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fc21 	bl	8002e50 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	6912      	ldr	r2, [r2, #16]
 8002618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800261c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	6952      	ldr	r2, [r2, #20]
 8002628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800262c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	68d2      	ldr	r2, [r2, #12]
 8002638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800263c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002672:	b2db      	uxtb	r3, r3
 8002674:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d003      	beq.n	8002684 <HAL_UART_Transmit+0x2c>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b22      	cmp	r3, #34	; 0x22
 8002680:	f040 808d 	bne.w	800279e <HAL_UART_Transmit+0x146>
  {
    if((pData == NULL) || (Size == 0))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_UART_Transmit+0x38>
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e085      	b.n	80027a0 <HAL_UART_Transmit+0x148>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Transmit+0x4a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e07e      	b.n	80027a0 <HAL_UART_Transmit+0x148>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b22      	cmp	r3, #34	; 0x22
 80026ba:	d104      	bne.n	80026c6 <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2232      	movs	r2, #50	; 0x32
 80026c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80026c4:	e003      	b.n	80026ce <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2212      	movs	r2, #18
 80026ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	88fa      	ldrh	r2, [r7, #6]
 80026d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 80026da:	e03c      	b.n	8002756 <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f0:	d11f      	bne.n	8002732 <HAL_UART_Transmit+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f9fb 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_UART_Transmit+0xb0>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e04b      	b.n	80027a0 <HAL_UART_Transmit+0x148>
        }
        tmp = (uint16_t*) pData;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002718:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <HAL_UART_Transmit+0xd2>
        {
          pData +=2;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3302      	adds	r3, #2
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	e015      	b.n	8002756 <HAL_UART_Transmit+0xfe>
        }
        else
        { 
          pData +=1;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	3301      	adds	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	e011      	b.n	8002756 <HAL_UART_Transmit+0xfe>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f9db 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_UART_Transmit+0xf0>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e02b      	b.n	80027a0 <HAL_UART_Transmit+0x148>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	1c59      	adds	r1, r3, #1
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	6053      	str	r3, [r2, #4]
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1be      	bne.n	80026dc <HAL_UART_Transmit+0x84>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2200      	movs	r2, #0
 8002762:	2140      	movs	r1, #64	; 0x40
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f9c5 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_UART_Transmit+0x11c>
    { 
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e015      	b.n	80027a0 <HAL_UART_Transmit+0x148>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b32      	cmp	r3, #50	; 0x32
 800277e:	d104      	bne.n	800278a <HAL_UART_Transmit+0x132>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2222      	movs	r2, #34	; 0x22
 8002784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002788:	e003      	b.n	8002792 <HAL_UART_Transmit+0x13a>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
  }
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp_state = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d002      	beq.n	80027d0 <HAL_UART_Transmit_IT+0x28>
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b22      	cmp	r3, #34	; 0x22
 80027ce:	d13b      	bne.n	8002848 <HAL_UART_Transmit_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_UART_Transmit_IT+0x34>
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_UART_Transmit_IT+0x38>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e034      	b.n	800284a <HAL_UART_Transmit_IT+0xa2>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Transmit_IT+0x46>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e02d      	b.n	800284a <HAL_UART_Transmit_IT+0xa2>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	88fa      	ldrh	r2, [r7, #6]
 8002800:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	88fa      	ldrh	r2, [r7, #6]
 8002806:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b22      	cmp	r3, #34	; 0x22
 8002818:	d104      	bne.n	8002824 <HAL_UART_Transmit_IT+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2232      	movs	r2, #50	; 0x32
 800281e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002822:	e003      	b.n	800282c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2212      	movs	r2, #18
 8002828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	68d2      	ldr	r2, [r2, #12]
 800283e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002842:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	e000      	b.n	800284a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002848:	2302      	movs	r3, #2
  }
}
 800284a:	4618      	mov	r0, r3
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp_state = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800286c:	b2db      	uxtb	r3, r3
 800286e:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d002      	beq.n	800287c <HAL_UART_Receive_IT+0x28>
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b12      	cmp	r3, #18
 800287a:	d14b      	bne.n	8002914 <HAL_UART_Receive_IT+0xc0>
  {
    if((pData == NULL ) || (Size == 0))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_UART_Receive_IT+0x34>
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_UART_Receive_IT+0x38>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e044      	b.n	8002916 <HAL_UART_Receive_IT+0xc2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_UART_Receive_IT+0x46>
 8002896:	2302      	movs	r3, #2
 8002898:	e03d      	b.n	8002916 <HAL_UART_Receive_IT+0xc2>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	88fa      	ldrh	r2, [r7, #6]
 80028ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b12      	cmp	r3, #18
 80028c4:	d104      	bne.n	80028d0 <HAL_UART_Receive_IT+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2232      	movs	r2, #50	; 0x32
 80028ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80028ce:	e003      	b.n	80028d8 <HAL_UART_Receive_IT+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2222      	movs	r2, #34	; 0x22
 80028d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	68d2      	ldr	r2, [r2, #12]
 80028ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	6952      	ldr	r2, [r2, #20]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	f042 0220 	orr.w	r2, r2, #32
 800290e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_UART_Receive_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <HAL_UART_IRQHandler>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmp_flag = 0, tmp_it_source = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf14      	ite	ne
 800293e:	2301      	movne	r3, #1
 8002940:	2300      	moveq	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	613b      	str	r3, [r7, #16]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_UART_IRQHandler+0x4a>
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_UART_IRQHandler+0x4a>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	613b      	str	r3, [r7, #16]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_UART_IRQHandler+0x84>
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_UART_IRQHandler+0x84>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf14      	ite	ne
 80029b2:	2301      	movne	r3, #1
 80029b4:	2300      	moveq	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	617b      	str	r3, [r7, #20]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_UART_IRQHandler+0xb2>
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_UART_IRQHandler+0xb2>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	f043 0202 	orr.w	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	617b      	str	r3, [r7, #20]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_UART_IRQHandler+0xe0>
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_UART_IRQHandler+0xe0>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f8:	f043 0208 	orr.w	r2, r3, #8
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf14      	ite	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	2300      	moveq	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	613b      	str	r3, [r7, #16]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_UART_IRQHandler+0x114>
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_UART_IRQHandler+0x114>
  { 
    UART_Receive_IT(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f97a 	bl	8002d28 <UART_Receive_IT>
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	613b      	str	r3, [r7, #16]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_UART_IRQHandler+0x148>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_UART_IRQHandler+0x148>
  {
    UART_Transmit_IT(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8e0 	bl	8002c28 <UART_Transmit_IT>
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf14      	ite	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	2300      	moveq	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	613b      	str	r3, [r7, #16]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_UART_IRQHandler+0x17c>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_UART_IRQHandler+0x17c>
  {
    UART_EndTransmit_IT(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f922 	bl	8002ce0 <UART_EndTransmit_IT>
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00f      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x1a4>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f80e 	bl	8002ae0 <HAL_UART_ErrorCallback>
  }  
}
 8002ac4:	bf00      	nop
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_UART_TxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback can be implemented in the user file
   */ 
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback can be implemented in the user file
   */ 
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop

08002af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b08:	f7fd fb60 	bl	80001cc <HAL_GetTick>
 8002b0c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d17b      	bne.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002b14:	e038      	b.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d034      	beq.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <UART_WaitOnFlagUntilTimeout+0x40>
 8002b24:	f7fd fb52 	bl	80001cc <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	1ad2      	subs	r2, r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d929      	bls.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	68d2      	ldr	r2, [r2, #12]
 8002b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b42:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	68d2      	ldr	r2, [r2, #12]
 8002b4e:	f022 0220 	bic.w	r2, r2, #32
 8002b52:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	68d2      	ldr	r2, [r2, #12]
 8002b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b62:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	6952      	ldr	r2, [r2, #20]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e04a      	b.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x12a>
  tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	401a      	ands	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1be      	bne.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x22>
 8002b98:	e040      	b.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d034      	beq.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <UART_WaitOnFlagUntilTimeout+0xc4>
 8002ba8:	f7fd fb10 	bl	80001cc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad2      	subs	r2, r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d929      	bls.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	68d2      	ldr	r2, [r2, #12]
 8002bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	68d2      	ldr	r2, [r2, #12]
 8002bd2:	f022 0220 	bic.w	r2, r2, #32
 8002bd6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	68d2      	ldr	r2, [r2, #12]
 8002be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	6952      	ldr	r2, [r2, #20]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e008      	b.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x12a>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	401a      	ands	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d0be      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xa6>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop

08002c28 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	d002      	beq.n	8002c4a <UART_Transmit_IT+0x22>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b32      	cmp	r3, #50	; 0x32
 8002c48:	d143      	bne.n	8002cd2 <UART_Transmit_IT+0xaa>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c52:	d119      	bne.n	8002c88 <UART_Transmit_IT+0x60>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	60bb      	str	r3, [r7, #8]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	8812      	ldrh	r2, [r2, #0]
 8002c62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c66:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <UART_Transmit_IT+0x54>
      {
        huart->pTxBuffPtr += 2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	1c9a      	adds	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]
 8002c7a:	e00e      	b.n	8002c9a <UART_Transmit_IT+0x72>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	621a      	str	r2, [r3, #32]
 8002c86:	e008      	b.n	8002c9a <UART_Transmit_IT+0x72>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	1c58      	adds	r0, r3, #1
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	6208      	str	r0, [r1, #32]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	84da      	strh	r2, [r3, #38]	; 0x26
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <UART_Transmit_IT+0xa6>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	68d2      	ldr	r2, [r2, #12]
 8002cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	68d2      	ldr	r2, [r2, #12]
 8002cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ccc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <UART_Transmit_IT+0xac>
  }
  else
  {
    return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
  }
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop

08002ce0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	68d2      	ldr	r2, [r2, #12]
 8002cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf6:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b32      	cmp	r3, #50	; 0x32
 8002d02:	d104      	bne.n	8002d0e <UART_EndTransmit_IT+0x2e>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2222      	movs	r2, #34	; 0x22
 8002d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002d0c:	e003      	b.n	8002d16 <UART_EndTransmit_IT+0x36>
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fed8 	bl	8002acc <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop

08002d28 <UART_Receive_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State; 
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b22      	cmp	r3, #34	; 0x22
 8002d42:	d002      	beq.n	8002d4a <UART_Receive_IT+0x22>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b32      	cmp	r3, #50	; 0x32
 8002d48:	d17c      	bne.n	8002e44 <UART_Receive_IT+0x11c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	d123      	bne.n	8002d9c <UART_Receive_IT+0x74>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	60bb      	str	r3, [r7, #8]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10e      	bne.n	8002d80 <UART_Receive_IT+0x58>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	1c9a      	adds	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d7e:	e029      	b.n	8002dd4 <UART_Receive_IT+0xac>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	629a      	str	r2, [r3, #40]	; 0x28
 8002d9a:	e01b      	b.n	8002dd4 <UART_Receive_IT+0xac>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <UART_Receive_IT+0x92>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	1c59      	adds	r1, r3, #1
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6291      	str	r1, [r2, #40]	; 0x28
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	6852      	ldr	r2, [r2, #4]
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e00c      	b.n	8002dd4 <UART_Receive_IT+0xac>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	1c59      	adds	r1, r3, #1
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6291      	str	r1, [r2, #40]	; 0x28
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	6852      	ldr	r2, [r2, #4]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	85da      	strh	r2, [r3, #46]	; 0x2e
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d12b      	bne.n	8002e40 <UART_Receive_IT+0x118>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	68d2      	ldr	r2, [r2, #12]
 8002df2:	f022 0220 	bic.w	r2, r2, #32
 8002df6:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b32      	cmp	r3, #50	; 0x32
 8002e02:	d104      	bne.n	8002e0e <UART_Receive_IT+0xe6>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2212      	movs	r2, #18
 8002e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002e0c:	e013      	b.n	8002e36 <UART_Receive_IT+0x10e>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	68d2      	ldr	r2, [r2, #12]
 8002e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	6952      	ldr	r2, [r2, #20]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fa82 	bl	8003340 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e002      	b.n	8002e46 <UART_Receive_IT+0x11e>
    }
    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <UART_Receive_IT+0x11e>
  }
  else
  {
    return HAL_BUSY; 
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop

08002e50 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	6912      	ldr	r2, [r2, #16]
 8002e66:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e92:	f023 030c 	bic.w	r3, r3, #12
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	6952      	ldr	r2, [r2, #20]
 8002ea6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6992      	ldr	r2, [r2, #24]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6f      	ldr	r2, [pc, #444]	; (8003074 <UART_SetConfig+0x224>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d16b      	bne.n	8002f94 <UART_SetConfig+0x144>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681c      	ldr	r4, [r3, #0]
 8002ec0:	f7ff fb5e 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	009a      	lsls	r2, r3, #2
 8002ece:	441a      	add	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eda:	4a67      	ldr	r2, [pc, #412]	; (8003078 <UART_SetConfig+0x228>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	011d      	lsls	r5, r3, #4
 8002ee4:	f7ff fb4c 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009a      	lsls	r2, r3, #2
 8002ef2:	441a      	add	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	fbb2 f6f3 	udiv	r6, r2, r3
 8002efe:	f7ff fb3f 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8002f02:	4602      	mov	r2, r0
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	009a      	lsls	r2, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	4a57      	ldr	r2, [pc, #348]	; (8003078 <UART_SetConfig+0x228>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2264      	movs	r2, #100	; 0x64
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	1af3      	subs	r3, r6, r3
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	3332      	adds	r3, #50	; 0x32
 8002f2c:	4a52      	ldr	r2, [pc, #328]	; (8003078 <UART_SetConfig+0x228>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f38:	441d      	add	r5, r3
 8002f3a:	f7ff fb21 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009a      	lsls	r2, r3, #2
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f54:	f7ff fb14 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009a      	lsls	r2, r3, #2
 8002f62:	441a      	add	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	4a42      	ldr	r2, [pc, #264]	; (8003078 <UART_SetConfig+0x228>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	2264      	movs	r2, #100	; 0x64
 8002f78:	fb02 f303 	mul.w	r3, r2, r3
 8002f7c:	1af3      	subs	r3, r6, r3
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	3332      	adds	r3, #50	; 0x32
 8002f82:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <UART_SetConfig+0x228>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	442b      	add	r3, r5
 8002f90:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 8002f92:	e06a      	b.n	800306a <UART_SetConfig+0x21a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681c      	ldr	r4, [r3, #0]
 8002f98:	f7ff fad0 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	4a31      	ldr	r2, [pc, #196]	; (8003078 <UART_SetConfig+0x228>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	011d      	lsls	r5, r3, #4
 8002fbc:	f7ff fabe 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009a      	lsls	r2, r3, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	fbb2 f6f3 	udiv	r6, r2, r3
 8002fd6:	f7ff fab1 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009a      	lsls	r2, r3, #2
 8002fe4:	441a      	add	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	4a21      	ldr	r2, [pc, #132]	; (8003078 <UART_SetConfig+0x228>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2264      	movs	r2, #100	; 0x64
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	1af3      	subs	r3, r6, r3
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	3332      	adds	r3, #50	; 0x32
 8003004:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <UART_SetConfig+0x228>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003010:	441d      	add	r5, r3
 8003012:	f7ff fa93 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8003016:	4602      	mov	r2, r0
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009a      	lsls	r2, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fbb2 f6f3 	udiv	r6, r2, r3
 800302c:	f7ff fa86 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8003030:	4602      	mov	r2, r0
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	009a      	lsls	r2, r3, #2
 800303a:	441a      	add	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	4a0c      	ldr	r2, [pc, #48]	; (8003078 <UART_SetConfig+0x228>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	2264      	movs	r2, #100	; 0x64
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	1af3      	subs	r3, r6, r3
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	3332      	adds	r3, #50	; 0x32
 800305a:	4a07      	ldr	r2, [pc, #28]	; (8003078 <UART_SetConfig+0x228>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	442b      	add	r3, r5
 8003068:	60a3      	str	r3, [r4, #8]
  }
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003072:	bf00      	nop
 8003074:	40013800 	.word	0x40013800
 8003078:	51eb851f 	.word	0x51eb851f

0800307c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8003080:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <MX_CAN_Init+0x64>)
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <MX_CAN_Init+0x68>)
 8003084:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <MX_CAN_Init+0x64>)
 8003088:	2210      	movs	r2, #16
 800308a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <MX_CAN_Init+0x64>)
 800308e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003092:	609a      	str	r2, [r3, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <MX_CAN_Init+0x64>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_1TQ;
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <MX_CAN_Init+0x64>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_1TQ;
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <MX_CAN_Init+0x64>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	615a      	str	r2, [r3, #20]
  hcan.Init.TTCM = DISABLE;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <MX_CAN_Init+0x64>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <MX_CAN_Init+0x64>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <MX_CAN_Init+0x64>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
  hcan.Init.NART = DISABLE;
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <MX_CAN_Init+0x64>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <MX_CAN_Init+0x64>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <MX_CAN_Init+0x64>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80030ca:	4805      	ldr	r0, [pc, #20]	; (80030e0 <MX_CAN_Init+0x64>)
 80030cc:	f7fd f89e 	bl	800020c <HAL_CAN_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80030d6:	f000 fa2f 	bl	8003538 <Error_Handler>
  }

}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000064 	.word	0x20000064
 80030e4:	40006400 	.word	0x40006400

080030e8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2a      	ldr	r2, [pc, #168]	; (80031a0 <HAL_CAN_MspInit+0xb8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d14d      	bne.n	8003196 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80030fa:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <HAL_CAN_MspInit+0xbc>)
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_CAN_MspInit+0xbc>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <HAL_CAN_MspInit+0xbc>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
  
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4619      	mov	r1, r3
 8003126:	4820      	ldr	r0, [pc, #128]	; (80031a8 <HAL_CAN_MspInit+0xc0>)
 8003128:	f7fd ff32 	bl	8000f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800312c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003130:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003136:	2303      	movs	r3, #3
 8003138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4619      	mov	r1, r3
 8003140:	4819      	ldr	r0, [pc, #100]	; (80031a8 <HAL_CAN_MspInit+0xc0>)
 8003142:	f7fd ff25 	bl	8000f90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003146:	4a19      	ldr	r2, [pc, #100]	; (80031ac <HAL_CAN_MspInit+0xc4>)
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_CAN_MspInit+0xc4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003154:	6053      	str	r3, [r2, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	2013      	movs	r0, #19
 800315c:	f7fd feba 	bl	8000ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003160:	2013      	movs	r0, #19
 8003162:	f7fd fed3 	bl	8000f0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	2014      	movs	r0, #20
 800316c:	f7fd feb2 	bl	8000ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003170:	2014      	movs	r0, #20
 8003172:	f7fd fecb 	bl	8000f0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	2015      	movs	r0, #21
 800317c:	f7fd feaa 	bl	8000ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003180:	2015      	movs	r0, #21
 8003182:	f7fd fec3 	bl	8000f0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	2016      	movs	r0, #22
 800318c:	f7fd fea2 	bl	8000ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003190:	2016      	movs	r0, #22
 8003192:	f7fd febb 	bl	8000f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003196:	bf00      	nop
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40006400 	.word	0x40006400
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010c00 	.word	0x40010c00
 80031ac:	40010000 	.word	0x40010000

080031b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	4a16      	ldr	r2, [pc, #88]	; (8003210 <MX_GPIO_Init+0x60>)
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <MX_GPIO_Init+0x60>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	6193      	str	r3, [r2, #24]
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <MX_GPIO_Init+0x60>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <MX_GPIO_Init+0x60>)
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <MX_GPIO_Init+0x60>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	6193      	str	r3, [r2, #24]
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <MX_GPIO_Init+0x60>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2120      	movs	r1, #32
 80031ea:	480a      	ldr	r0, [pc, #40]	; (8003214 <MX_GPIO_Init+0x64>)
 80031ec:	f7fe f82e 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80031f0:	2320      	movs	r3, #32
 80031f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f4:	2301      	movs	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f8:	2302      	movs	r3, #2
 80031fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80031fc:	f107 0308 	add.w	r3, r7, #8
 8003200:	4619      	mov	r1, r3
 8003202:	4804      	ldr	r0, [pc, #16]	; (8003214 <MX_GPIO_Init+0x64>)
 8003204:	f7fd fec4 	bl	8000f90 <HAL_GPIO_Init>

}
 8003208:	bf00      	nop
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	40010800 	.word	0x40010800

08003218 <UART_TO_CAN_Transfer>:
void CAN_TO_UART_Transfer();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void UART_TO_CAN_Transfer()
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
	hcan.pTxMsg->DLC = uartRxMsg[1];
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <UART_TO_CAN_Transfer+0x8c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <UART_TO_CAN_Transfer+0x90>)
 8003224:	7852      	ldrb	r2, [r2, #1]
 8003226:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < hcan.pTxMsg->DLC; i++)
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	e00d      	b.n	800324a <UART_TO_CAN_Transfer+0x32>
	{
		hcan.pTxMsg->Data[i+2] = uartRxMsg[i+2];
 800322e:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <UART_TO_CAN_Transfer+0x8c>)
 8003230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3302      	adds	r3, #2
 8003236:	6979      	ldr	r1, [r7, #20]
 8003238:	3102      	adds	r1, #2
 800323a:	481b      	ldr	r0, [pc, #108]	; (80032a8 <UART_TO_CAN_Transfer+0x90>)
 800323c:	5c41      	ldrb	r1, [r0, r1]
 800323e:	4413      	add	r3, r2
 8003240:	460a      	mov	r2, r1
 8003242:	751a      	strb	r2, [r3, #20]

/* USER CODE BEGIN 0 */
void UART_TO_CAN_Transfer()
{
	hcan.pTxMsg->DLC = uartRxMsg[1];
	for(int i = 0; i < hcan.pTxMsg->DLC; i++)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3301      	adds	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <UART_TO_CAN_Transfer+0x8c>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	429a      	cmp	r2, r3
 8003254:	d8eb      	bhi.n	800322e <UART_TO_CAN_Transfer+0x16>
	{
		hcan.pTxMsg->Data[i+2] = uartRxMsg[i+2];
	}
	hcan.pTxMsg->RTR = CAN_RTR_DATA;
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <UART_TO_CAN_Transfer+0x8c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
	unsigned int id[4];
	id[0] = (unsigned int) ((uartRxMsg[11] << 24) & 0x1F000000);
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <UART_TO_CAN_Transfer+0x90>)
 8003260:	7adb      	ldrb	r3, [r3, #11]
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
 8003268:	607b      	str	r3, [r7, #4]
	id[1] = (unsigned int) ((uartRxMsg[12] << 16) & 0xFF0000);
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <UART_TO_CAN_Transfer+0x90>)
 800326c:	7b1b      	ldrb	r3, [r3, #12]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003274:	60bb      	str	r3, [r7, #8]
	id[2] = (unsigned int) ((uartRxMsg[13] << 8) & 0xFF00);
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <UART_TO_CAN_Transfer+0x90>)
 8003278:	7b5b      	ldrb	r3, [r3, #13]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	b29b      	uxth	r3, r3
 800327e:	60fb      	str	r3, [r7, #12]
	id[3] = (unsigned int) (uartRxMsg[14] & 0xFF);
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <UART_TO_CAN_Transfer+0x90>)
 8003282:	7b9b      	ldrb	r3, [r3, #14]
 8003284:	613b      	str	r3, [r7, #16]
	hcan.pTxMsg->ExtId = id[0]|id[1]|id[2]|id[3];
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <UART_TO_CAN_Transfer+0x8c>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	4311      	orrs	r1, r2
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4311      	orrs	r1, r2
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	20000064 	.word	0x20000064
 80032a8:	200000a4 	.word	0x200000a4

080032ac <CAN_TO_UART_Transfer>:

void CAN_TO_UART_Transfer()
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
	uartTxMsg[0] = hcan.pRxMsg->DLC;
 80032b2:	4b21      	ldr	r3, [pc, #132]	; (8003338 <CAN_TO_UART_Transfer+0x8c>)
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b20      	ldr	r3, [pc, #128]	; (800333c <CAN_TO_UART_Transfer+0x90>)
 80032bc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < hcan.pRxMsg->DLC; i++)
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	e00c      	b.n	80032de <CAN_TO_UART_Transfer+0x32>
	{
		uartTxMsg[i+1] = hcan.pRxMsg->Data[i+1];
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3301      	adds	r3, #1
 80032c8:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <CAN_TO_UART_Transfer+0x8c>)
 80032ca:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	3201      	adds	r2, #1
 80032d0:	440a      	add	r2, r1
 80032d2:	7d11      	ldrb	r1, [r2, #20]
 80032d4:	4a19      	ldr	r2, [pc, #100]	; (800333c <CAN_TO_UART_Transfer+0x90>)
 80032d6:	54d1      	strb	r1, [r2, r3]
}

void CAN_TO_UART_Transfer()
{
	uartTxMsg[0] = hcan.pRxMsg->DLC;
	for(int i = 0; i < hcan.pRxMsg->DLC; i++)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3301      	adds	r3, #1
 80032dc:	607b      	str	r3, [r7, #4]
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <CAN_TO_UART_Transfer+0x8c>)
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d8ec      	bhi.n	80032c4 <CAN_TO_UART_Transfer+0x18>
	{
		uartTxMsg[i+1] = hcan.pRxMsg->Data[i+1];
	}
	uartTxMsg[9] = DATA_FRAME;
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <CAN_TO_UART_Transfer+0x90>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	725a      	strb	r2, [r3, #9]
	uartTxMsg[10] = (unsigned char) ((hcan.pRxMsg->ExtId >> 24) & 0xFF);
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <CAN_TO_UART_Transfer+0x8c>)
 80032f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	0e1b      	lsrs	r3, r3, #24
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <CAN_TO_UART_Transfer+0x90>)
 80032fc:	729a      	strb	r2, [r3, #10]
	uartTxMsg[11] = (unsigned char) ((hcan.pRxMsg->ExtId >> 16) & 0xFF);
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <CAN_TO_UART_Transfer+0x8c>)
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <CAN_TO_UART_Transfer+0x90>)
 800330a:	72da      	strb	r2, [r3, #11]
	uartTxMsg[12] = (unsigned char) ((hcan.pRxMsg->ExtId >> 8) & 0xFF);
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <CAN_TO_UART_Transfer+0x8c>)
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <CAN_TO_UART_Transfer+0x90>)
 8003318:	731a      	strb	r2, [r3, #12]
	uartTxMsg[13] = (unsigned char) ((hcan.pRxMsg->ExtId) & 0xFF);
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <CAN_TO_UART_Transfer+0x8c>)
 800331c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <CAN_TO_UART_Transfer+0x90>)
 8003324:	735a      	strb	r2, [r3, #13]
	uartTxMsg[14] = ARINC_MSG;
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <CAN_TO_UART_Transfer+0x90>)
 8003328:	2201      	movs	r2, #1
 800332a:	739a      	strb	r2, [r3, #14]
//	if(hcan.pRxMsg->ExtId == 0x82501C0){HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);}
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000064 	.word	0x20000064
 800333c:	200000b4 	.word	0x200000b4

08003340 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	if(uartRxMsg[0] == ARINC_MSG){
 8003348:	4b13      	ldr	r3, [pc, #76]	; (8003398 <HAL_UART_RxCpltCallback+0x58>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d10a      	bne.n	8003366 <HAL_UART_RxCpltCallback+0x26>
		UART_TO_CAN_Transfer();
 8003350:	f7ff ff62 	bl	8003218 <UART_TO_CAN_Transfer>
		if(HAL_CAN_Transmit_IT(&hcan) != HAL_OK)
 8003354:	4811      	ldr	r0, [pc, #68]	; (800339c <HAL_UART_RxCpltCallback+0x5c>)
 8003356:	f7fd f90d 	bl	8000574 <HAL_CAN_Transmit_IT>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_UART_RxCpltCallback+0x46>
		{
		    /* Reception Error */
		    Error_Handler();
 8003360:	f000 f8ea 	bl	8003538 <Error_Handler>
 8003364:	e00f      	b.n	8003386 <HAL_UART_RxCpltCallback+0x46>
		}
	}else if(uartRxMsg[0] == CTRL_MSG){
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_UART_RxCpltCallback+0x58>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d10b      	bne.n	8003386 <HAL_UART_RxCpltCallback+0x46>
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
 800336e:	2364      	movs	r3, #100	; 0x64
 8003370:	220f      	movs	r2, #15
 8003372:	490b      	ldr	r1, [pc, #44]	; (80033a0 <HAL_UART_RxCpltCallback+0x60>)
 8003374:	480b      	ldr	r0, [pc, #44]	; (80033a4 <HAL_UART_RxCpltCallback+0x64>)
 8003376:	f7ff f96f 	bl	8002658 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
 800337a:	2364      	movs	r3, #100	; 0x64
 800337c:	220f      	movs	r2, #15
 800337e:	4908      	ldr	r1, [pc, #32]	; (80033a0 <HAL_UART_RxCpltCallback+0x60>)
 8003380:	4808      	ldr	r0, [pc, #32]	; (80033a4 <HAL_UART_RxCpltCallback+0x64>)
 8003382:	f7ff f969 	bl	8002658 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_IT(&huart2, uartRxMsg, MSG_PKT_SIZE);
 8003386:	220f      	movs	r2, #15
 8003388:	4903      	ldr	r1, [pc, #12]	; (8003398 <HAL_UART_RxCpltCallback+0x58>)
 800338a:	4806      	ldr	r0, [pc, #24]	; (80033a4 <HAL_UART_RxCpltCallback+0x64>)
 800338c:	f7ff fa62 	bl	8002854 <HAL_UART_Receive_IT>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200000a4 	.word	0x200000a4
 800339c:	20000064 	.word	0x20000064
 80033a0:	200000b4 	.word	0x200000b4
 80033a4:	200000c4 	.word	0x200000c4

080033a8 <HAL_CAN_RxCpltCallback>:


void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *CanHandle)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80033b0:	2201      	movs	r2, #1
 80033b2:	2120      	movs	r1, #32
 80033b4:	480b      	ldr	r0, [pc, #44]	; (80033e4 <HAL_CAN_RxCpltCallback+0x3c>)
 80033b6:	f7fd ff49 	bl	800124c <HAL_GPIO_WritePin>
	CAN_TO_UART_Transfer();
 80033ba:	f7ff ff77 	bl	80032ac <CAN_TO_UART_Transfer>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*) &uartTxMsg, 15);
 80033be:	220f      	movs	r2, #15
 80033c0:	4909      	ldr	r1, [pc, #36]	; (80033e8 <HAL_CAN_RxCpltCallback+0x40>)
 80033c2:	480a      	ldr	r0, [pc, #40]	; (80033ec <HAL_CAN_RxCpltCallback+0x44>)
 80033c4:	f7ff f9f0 	bl	80027a8 <HAL_UART_Transmit_IT>

  /* Receive */
  if (HAL_CAN_Receive_IT(CanHandle, 10) != HAL_OK)
 80033c8:	210a      	movs	r1, #10
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fd f9f8 	bl	80007c0 <HAL_CAN_Receive_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_CAN_RxCpltCallback+0x32>
  {
//	  HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
    /* Reception Error */
    Error_Handler();
 80033d6:	f000 f8af 	bl	8003538 <Error_Handler>
  }
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40010800 	.word	0x40010800
 80033e8:	200000b4 	.word	0x200000b4
 80033ec:	200000c4 	.word	0x200000c4

080033f0 <main>:
/* USER CODE END 0 */

int main(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033f6:	f7fc fea9 	bl	800014c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80033fa:	f000 f855 	bl	80034a8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033fe:	f7ff fed7 	bl	80031b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003402:	f000 f97f 	bl	8003704 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8003406:	f7ff fe39 	bl	800307c <MX_CAN_Init>

  /* USER CODE BEGIN 2 */

  //start listening for uart messages
  HAL_UART_Receive_IT(&huart2, uartRxMsg, MSG_PKT_SIZE);
 800340a:	220f      	movs	r2, #15
 800340c:	4920      	ldr	r1, [pc, #128]	; (8003490 <main+0xa0>)
 800340e:	4821      	ldr	r0, [pc, #132]	; (8003494 <main+0xa4>)
 8003410:	f7ff fa20 	bl	8002854 <HAL_UART_Receive_IT>
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  CAN_FilterConfTypeDef  sFilterConfig;
  hcan.pTxMsg = &TxMessage;
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <main+0xa8>)
 8003416:	4a21      	ldr	r2, [pc, #132]	; (800349c <main+0xac>)
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
  hcan.pRxMsg = &RxMessage;
 800341a:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <main+0xa8>)
 800341c:	4a20      	ldr	r2, [pc, #128]	; (80034a0 <main+0xb0>)
 800341e:	635a      	str	r2, [r3, #52]	; 0x34

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterNumber = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003428:	2301      	movs	r3, #1
 800342a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800342c:	2300      	movs	r3, #0
 800342e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8003430:	2300      	movs	r3, #0
 8003432:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8003440:	2301      	movs	r3, #1
 8003442:	623b      	str	r3, [r7, #32]
  sFilterConfig.BankNumber = 14;
 8003444:	230e      	movs	r3, #14
 8003446:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8003448:	463b      	mov	r3, r7
 800344a:	4619      	mov	r1, r3
 800344c:	4812      	ldr	r0, [pc, #72]	; (8003498 <main+0xa8>)
 800344e:	f7fc ffbf 	bl	80003d0 <HAL_CAN_ConfigFilter>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <main+0x6c>
  {
    /* Filter configuration Error */
    Error_Handler();
 8003458:	f000 f86e 	bl	8003538 <Error_Handler>
  }

  /*##-3- Configure Transmission process #####################################*/
  hcan.pTxMsg->StdId = 0x00;
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <main+0xa8>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
  hcan.pTxMsg->ExtId = 0xE9E1AC3;
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <main+0xa8>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <main+0xb4>)
 800346a:	605a      	str	r2, [r3, #4]
  hcan.pTxMsg->RTR = CAN_RTR_DATA;
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <main+0xa8>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	2200      	movs	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
  hcan.pTxMsg->IDE = CAN_ID_EXT;
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <main+0xa8>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	2204      	movs	r2, #4
 800347a:	609a      	str	r2, [r3, #8]
  hcan.pTxMsg->DLC = 8;
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <main+0xa8>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	2208      	movs	r2, #8
 8003482:	611a      	str	r2, [r3, #16]

  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 8003484:	2100      	movs	r1, #0
 8003486:	4804      	ldr	r0, [pc, #16]	; (8003498 <main+0xa8>)
 8003488:	f7fd f99a 	bl	80007c0 <HAL_CAN_Receive_IT>
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
 800348c:	e7fe      	b.n	800348c <main+0x9c>
 800348e:	bf00      	nop
 8003490:	200000a4 	.word	0x200000a4
 8003494:	200000c4 	.word	0x200000c4
 8003498:	20000064 	.word	0x20000064
 800349c:	20000024 	.word	0x20000024
 80034a0:	20000040 	.word	0x20000040
 80034a4:	0e9e1ac3 	.word	0x0e9e1ac3

080034a8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b090      	sub	sp, #64	; 0x40
 80034ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034ae:	2302      	movs	r3, #2
 80034b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034b2:	2301      	movs	r3, #1
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80034b6:	2310      	movs	r3, #16
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034ba:	2302      	movs	r3, #2
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80034be:	2300      	movs	r3, #0
 80034c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80034c2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80034c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034c8:	f107 0318 	add.w	r3, r7, #24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd fed5 	bl	800127c <HAL_RCC_OscConfig>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80034d8:	f000 f82e 	bl	8003538 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034dc:	230f      	movs	r3, #15
 80034de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034e0:	2302      	movs	r3, #2
 80034e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2102      	movs	r1, #2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fde0 	bl	80020bc <HAL_RCC_ClockConfig>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003502:	f000 f819 	bl	8003538 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003506:	f7ff f80f 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 800350a:	4602      	mov	r2, r0
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <SystemClock_Config+0x8c>)
 800350e:	fba3 2302 	umull	r2, r3, r3, r2
 8003512:	099b      	lsrs	r3, r3, #6
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd fd07 	bl	8000f28 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800351a:	2004      	movs	r0, #4
 800351c:	f7fd fd10 	bl	8000f40 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003520:	2200      	movs	r2, #0
 8003522:	2100      	movs	r1, #0
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f7fd fcd4 	bl	8000ed4 <HAL_NVIC_SetPriority>
}
 800352c:	bf00      	nop
 800352e:	3740      	adds	r7, #64	; 0x40
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	10624dd3 	.word	0x10624dd3

08003538 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 800353c:	e7fe      	b.n	800353c <Error_Handler+0x4>
 800353e:	bf00      	nop

08003540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003546:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <HAL_MspInit+0x90>)
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <HAL_MspInit+0x90>)
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6193      	str	r3, [r2, #24]
 8003552:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <HAL_MspInit+0x90>)
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800355e:	2003      	movs	r0, #3
 8003560:	f7fd fcac 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	f06f 000b 	mvn.w	r0, #11
 800356c:	f7fd fcb2 	bl	8000ed4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003570:	2200      	movs	r2, #0
 8003572:	2100      	movs	r1, #0
 8003574:	f06f 000a 	mvn.w	r0, #10
 8003578:	f7fd fcac 	bl	8000ed4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800357c:	2200      	movs	r2, #0
 800357e:	2100      	movs	r1, #0
 8003580:	f06f 0009 	mvn.w	r0, #9
 8003584:	f7fd fca6 	bl	8000ed4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	2100      	movs	r1, #0
 800358c:	f06f 0004 	mvn.w	r0, #4
 8003590:	f7fd fca0 	bl	8000ed4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003594:	2200      	movs	r2, #0
 8003596:	2100      	movs	r1, #0
 8003598:	f06f 0003 	mvn.w	r0, #3
 800359c:	f7fd fc9a 	bl	8000ed4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	2100      	movs	r1, #0
 80035a4:	f06f 0001 	mvn.w	r0, #1
 80035a8:	f7fd fc94 	bl	8000ed4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2100      	movs	r1, #0
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f7fd fc8e 	bl	8000ed4 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035b8:	4a06      	ldr	r2, [pc, #24]	; (80035d4 <HAL_MspInit+0x94>)
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_MspInit+0x94>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80035c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035c6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40010000 	.word	0x40010000

080035d8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 80035e8:	e7fe      	b.n	80035e8 <HardFault_Handler+0x4>
 80035ea:	bf00      	nop

080035ec <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 80035f0:	e7fe      	b.n	80035f0 <MemManage_Handler+0x4>
 80035f2:	bf00      	nop

080035f4 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 80035f8:	e7fe      	b.n	80035f8 <BusFault_Handler+0x4>
 80035fa:	bf00      	nop

080035fc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8003600:	e7fe      	b.n	8003600 <UsageFault_Handler+0x4>
 8003602:	bf00      	nop

08003604 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800362c:	f7fc fdc0 	bl	80001b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003630:	f7fd fca2 	bl	8000f78 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}

08003638 <USB_HP_CAN1_TX_IRQHandler>:

/**
* @brief This function handles USB high priority or CAN TX interrupts.
*/
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800363e:	f7fd f919 	bl	8000874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000064 	.word	0x20000064

0800364c <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003652:	f7fd f90f 	bl	8000874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000064 	.word	0x20000064

08003660 <CAN1_RX1_IRQHandler>:

/**
* @brief This function handles CAN RX1 interrupt.
*/
void CAN1_RX1_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <CAN1_RX1_IRQHandler+0x10>)
 8003666:	f7fd f905 	bl	8000874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000064 	.word	0x20000064

08003674 <CAN1_SCE_IRQHandler>:

/**
* @brief This function handles CAN SCE interrupt.
*/
void CAN1_SCE_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003678:	4802      	ldr	r0, [pc, #8]	; (8003684 <CAN1_SCE_IRQHandler+0x10>)
 800367a:	f7fd f8fb 	bl	8000874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000064 	.word	0x20000064

08003688 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800368c:	4802      	ldr	r0, [pc, #8]	; (8003698 <USART2_IRQHandler+0x10>)
 800368e:	f7ff f947 	bl	8002920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	200000c4 	.word	0x200000c4

0800369c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <SystemInit+0x5c>)
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <SystemInit+0x5c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80036ac:	4912      	ldr	r1, [pc, #72]	; (80036f8 <SystemInit+0x5c>)
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <SystemInit+0x5c>)
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <SystemInit+0x60>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80036b8:	4a0f      	ldr	r2, [pc, #60]	; (80036f8 <SystemInit+0x5c>)
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <SystemInit+0x5c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80036c8:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <SystemInit+0x5c>)
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <SystemInit+0x5c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80036d4:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <SystemInit+0x5c>)
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <SystemInit+0x5c>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80036de:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <SystemInit+0x5c>)
 80036e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80036e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <SystemInit+0x64>)
 80036ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ee:	609a      	str	r2, [r3, #8]
#endif 
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40021000 	.word	0x40021000
 80036fc:	f8ff0000 	.word	0xf8ff0000
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <MX_USART2_UART_Init+0x4c>)
 800370a:	4a12      	ldr	r2, [pc, #72]	; (8003754 <MX_USART2_UART_Init+0x50>)
 800370c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <MX_USART2_UART_Init+0x4c>)
 8003710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <MX_USART2_UART_Init+0x4c>)
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <MX_USART2_UART_Init+0x4c>)
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <MX_USART2_UART_Init+0x4c>)
 8003724:	2200      	movs	r2, #0
 8003726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <MX_USART2_UART_Init+0x4c>)
 800372a:	220c      	movs	r2, #12
 800372c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <MX_USART2_UART_Init+0x4c>)
 8003730:	2200      	movs	r2, #0
 8003732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <MX_USART2_UART_Init+0x4c>)
 8003736:	2200      	movs	r2, #0
 8003738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800373a:	4805      	ldr	r0, [pc, #20]	; (8003750 <MX_USART2_UART_Init+0x4c>)
 800373c:	f7fe ff42 	bl	80025c4 <HAL_UART_Init>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003746:	f7ff fef7 	bl	8003538 <Error_Handler>
  }

}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	200000c4 	.word	0x200000c4
 8003754:	40004400 	.word	0x40004400

08003758 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_UART_MspInit+0x74>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d12b      	bne.n	80037c2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800376a:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <HAL_UART_MspInit+0x78>)
 800376c:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <HAL_UART_MspInit+0x78>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	61d3      	str	r3, [r2, #28]
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_UART_MspInit+0x78>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003782:	2304      	movs	r3, #4
 8003784:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800378a:	2303      	movs	r3, #3
 800378c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378e:	f107 0310 	add.w	r3, r7, #16
 8003792:	4619      	mov	r1, r3
 8003794:	480f      	ldr	r0, [pc, #60]	; (80037d4 <HAL_UART_MspInit+0x7c>)
 8003796:	f7fd fbfb 	bl	8000f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800379a:	2308      	movs	r3, #8
 800379c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a6:	f107 0310 	add.w	r3, r7, #16
 80037aa:	4619      	mov	r1, r3
 80037ac:	4809      	ldr	r0, [pc, #36]	; (80037d4 <HAL_UART_MspInit+0x7c>)
 80037ae:	f7fd fbef 	bl	8000f90 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	2026      	movs	r0, #38	; 0x26
 80037b8:	f7fd fb8c 	bl	8000ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037bc:	2026      	movs	r0, #38	; 0x26
 80037be:	f7fd fba5 	bl	8000f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80037c2:	bf00      	nop
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40004400 	.word	0x40004400
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010800 	.word	0x40010800

080037d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80037d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80037da:	e003      	b.n	80037e4 <LoopCopyDataInit>

080037dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80037de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80037e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80037e2:	3104      	adds	r1, #4

080037e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80037e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80037ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80037ec:	d3f6      	bcc.n	80037dc <CopyDataInit>
  ldr r2, =_sbss
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80037f0:	e002      	b.n	80037f8 <LoopFillZerobss>

080037f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80037f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80037f4:	f842 3b04 	str.w	r3, [r2], #4

080037f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80037fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80037fc:	d3f9      	bcc.n	80037f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037fe:	f7ff ff4d 	bl	800369c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003802:	f000 f80f 	bl	8003824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003806:	f7ff fdf3 	bl	80033f0 <main>
  bx lr
 800380a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 800380c:	080038bc 	.word	0x080038bc
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8003810:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003814:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003818:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 800381c:	20000104 	.word	0x20000104

08003820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003820:	e7fe      	b.n	8003820 <ADC1_2_IRQHandler>
	...

08003824 <__libc_init_array>:
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <__libc_init_array+0x3c>)
 8003826:	b570      	push	{r4, r5, r6, lr}
 8003828:	461e      	mov	r6, r3
 800382a:	4c0e      	ldr	r4, [pc, #56]	; (8003864 <__libc_init_array+0x40>)
 800382c:	2500      	movs	r5, #0
 800382e:	1ae4      	subs	r4, r4, r3
 8003830:	10a4      	asrs	r4, r4, #2
 8003832:	42a5      	cmp	r5, r4
 8003834:	d004      	beq.n	8003840 <__libc_init_array+0x1c>
 8003836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800383a:	4798      	blx	r3
 800383c:	3501      	adds	r5, #1
 800383e:	e7f8      	b.n	8003832 <__libc_init_array+0xe>
 8003840:	f000 f816 	bl	8003870 <_init>
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <__libc_init_array+0x44>)
 8003846:	4c09      	ldr	r4, [pc, #36]	; (800386c <__libc_init_array+0x48>)
 8003848:	461e      	mov	r6, r3
 800384a:	1ae4      	subs	r4, r4, r3
 800384c:	10a4      	asrs	r4, r4, #2
 800384e:	2500      	movs	r5, #0
 8003850:	42a5      	cmp	r5, r4
 8003852:	d004      	beq.n	800385e <__libc_init_array+0x3a>
 8003854:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003858:	4798      	blx	r3
 800385a:	3501      	adds	r5, #1
 800385c:	e7f8      	b.n	8003850 <__libc_init_array+0x2c>
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	080038b4 	.word	0x080038b4
 8003864:	080038b4 	.word	0x080038b4
 8003868:	080038b4 	.word	0x080038b4
 800386c:	080038b8 	.word	0x080038b8

08003870 <_init>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr

0800387c <_fini>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr
