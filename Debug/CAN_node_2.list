
C:\Users\Julia\Documents\stm_projekty\CAN_node_2\Debug\CAN_node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000100  20000004  0800363c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000104  0800363c  00020104  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007723  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001615  00000000  00000000  00027750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000660  00000000  00000000  00028d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  000293c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003608  00000000  00000000  00029950  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ca9  00000000  00000000  0002cf58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002ec01  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000176c  00000000  00000000  0002ec80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080035ec 	.word	0x080035ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080035ec 	.word	0x080035ec

0800014c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fd7d 	bl	8000c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 f8a8 	bl	80032bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000180:	f002 f8a2 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 8000184:	4602      	mov	r2, r0
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <HAL_InitTick+0x34>)
 8000188:	fba3 2302 	umull	r2, r3, r3, r2
 800018c:	099b      	lsrs	r3, r3, #6
 800018e:	4618      	mov	r0, r3
 8000190:	f000 fd9a 	bl	8000cc8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000194:	2200      	movs	r2, #0
 8000196:	6879      	ldr	r1, [r7, #4]
 8000198:	f04f 30ff 	mov.w	r0, #4294967295
 800019c:	f000 fd6a 	bl	8000c74 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80001a0:	2300      	movs	r3, #0
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	10624dd3 	.word	0x10624dd3

080001b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  uwTick++;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x18>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x18>)
 80001bc:	6013      	str	r3, [r2, #0]
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  return uwTick;
 80001d0:	4b02      	ldr	r3, [pc, #8]	; (80001dc <HAL_GetTick+0x10>)
 80001d2:	681b      	ldr	r3, [r3, #0]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000020 	.word	0x20000020

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80001ec:	f7ff ffee 	bl	80001cc <HAL_GetTick>
 80001f0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80001f2:	bf00      	nop
 80001f4:	f7ff ffea 	bl	80001cc <HAL_GetTick>
 80001f8:	4602      	mov	r2, r0
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	1ad2      	subs	r2, r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f7      	bcc.n	80001f4 <HAL_Delay+0x14>
  {
  }
}
 8000204:	bf00      	nop
 8000206:	3710      	adds	r7, #16
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8000214:	2300      	movs	r3, #0
 8000216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_mcr = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d101      	bne.n	800022a <HAL_CAN_Init+0x1e>
  {
     return HAL_ERROR;
 8000226:	2301      	movs	r3, #1
 8000228:	e0cd      	b.n	80003c6 <HAL_CAN_Init+0x1ba>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d106      	bne.n	8000244 <HAL_CAN_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f002 fe22 	bl	8002e88 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2202      	movs	r2, #2
 8000248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	6812      	ldr	r2, [r2, #0]
 8000254:	6812      	ldr	r2, [r2, #0]
 8000256:	f022 0202 	bic.w	r2, r2, #2
 800025a:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	6812      	ldr	r2, [r2, #0]
 8000264:	6812      	ldr	r2, [r2, #0]
 8000266:	f042 0201 	orr.w	r2, r2, #1
 800026a:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 800026c:	f7ff ffae 	bl	80001cc <HAL_GetTick>
 8000270:	60f8      	str	r0, [r7, #12]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000272:	e010      	b.n	8000296 <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000274:	f7ff ffaa 	bl	80001cc <HAL_GetTick>
 8000278:	4602      	mov	r2, r0
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	2b0a      	cmp	r3, #10
 8000280:	d909      	bls.n	8000296 <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2203      	movs	r2, #3
 8000286:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8000292:	2303      	movs	r3, #3
 8000294:	e097      	b.n	80003c6 <HAL_CAN_Init+0x1ba>

  /* Get timeout */
  tickstart = HAL_GetTick();   
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0e7      	beq.n	8000274 <HAL_CAN_Init+0x68>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d078      	beq.n	80003a4 <HAL_CAN_Init+0x198>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d103      	bne.n	80002c2 <HAL_CAN_Init+0xb6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c0:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	69db      	ldr	r3, [r3, #28]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d103      	bne.n	80002d2 <HAL_CAN_Init+0xc6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d0:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	6a1b      	ldr	r3, [r3, #32]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d103      	bne.n	80002e2 <HAL_CAN_Init+0xd6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	f043 0320 	orr.w	r3, r3, #32
 80002e0:	613b      	str	r3, [r7, #16]
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d103      	bne.n	80002f2 <HAL_CAN_Init+0xe6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	f043 0310 	orr.w	r3, r3, #16
 80002f0:	613b      	str	r3, [r7, #16]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d103      	bne.n	8000302 <HAL_CAN_Init+0xf6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	f043 0308 	orr.w	r3, r3, #8
 8000300:	613b      	str	r3, [r7, #16]
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000306:	2b01      	cmp	r3, #1
 8000308:	d103      	bne.n	8000312 <HAL_CAN_Init+0x106>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	613b      	str	r3, [r7, #16]
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	6812      	ldr	r2, [r2, #0]
 800031c:	f022 01fc 	bic.w	r1, r2, #252	; 0xfc
 8000320:	693a      	ldr	r2, [r7, #16]
 8000322:	430a      	orrs	r2, r1
 8000324:	601a      	str	r2, [r3, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6891      	ldr	r1, [r2, #8]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	68d2      	ldr	r2, [r2, #12]
 8000332:	4311      	orrs	r1, r2
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	6912      	ldr	r2, [r2, #16]
 8000338:	4311      	orrs	r1, r2
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6952      	ldr	r2, [r2, #20]
 800033e:	4311      	orrs	r1, r2
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	6852      	ldr	r2, [r2, #4]
 8000344:	3a01      	subs	r2, #1
 8000346:	430a      	orrs	r2, r1
 8000348:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	6812      	ldr	r2, [r2, #0]
 8000352:	6812      	ldr	r2, [r2, #0]
 8000354:	f022 0201 	bic.w	r2, r2, #1
 8000358:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 800035a:	f7ff ff37 	bl	80001cc <HAL_GetTick>
 800035e:	60f8      	str	r0, [r7, #12]
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000360:	e010      	b.n	8000384 <HAL_CAN_Init+0x178>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000362:	f7ff ff33 	bl	80001cc <HAL_GetTick>
 8000366:	4602      	mov	r2, r0
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	2b0a      	cmp	r3, #10
 800036e:	d909      	bls.n	8000384 <HAL_CAN_Init+0x178>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2203      	movs	r2, #3
 8000374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8000380:	2303      	movs	r3, #3
 8000382:	e020      	b.n	80003c6 <HAL_CAN_Init+0x1ba>

    /* Get timeout */
    tickstart = HAL_GetTick();   
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0e7      	beq.n	8000362 <HAL_CAN_Init+0x156>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <HAL_CAN_Init+0x198>
    {
      status = CAN_INITSTATUS_SUCCESS;
 80003a0:	2301      	movs	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d108      	bne.n	80003bc <HAL_CAN_Init+0x1b0>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2200      	movs	r2, #0
 80003ae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2201      	movs	r2, #1
 80003b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
    /* Return function status */
    return HAL_OK;
 80003b8:	2300      	movs	r3, #0
 80003ba:	e004      	b.n	80003c6 <HAL_CAN_Init+0x1ba>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2204      	movs	r2, #4
 80003c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Return function status */
    return HAL_ERROR;
 80003c4:	2301      	movs	r3, #1
  }
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop

080003d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	2201      	movs	r2, #1
 80003e4:	fa02 f303 	lsl.w	r3, r2, r3
 80003e8:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	6812      	ldr	r2, [r2, #0]
 80003f2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80003f6:	f422 517c 	bic.w	r1, r2, #16128	; 0x3f00
 80003fa:	683a      	ldr	r2, [r7, #0]
 80003fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80003fe:	0212      	lsls	r2, r2, #8
 8000400:	430a      	orrs	r2, r1
 8000402:	f042 0201 	orr.w	r2, r2, #1
 8000406:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8)   );
  
  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	6812      	ldr	r2, [r2, #0]
 8000412:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	43d2      	mvns	r2, r2
 800041a:	400a      	ands	r2, r1
 800041c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  
  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	69db      	ldr	r3, [r3, #28]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d127      	bne.n	8000478 <HAL_CAN_ConfigFilter+0xa8>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	43d2      	mvns	r2, r2
 8000438:	400a      	ands	r2, r1
 800043a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8000446:	6839      	ldr	r1, [r7, #0]
 8000448:	68c9      	ldr	r1, [r1, #12]
 800044a:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 800044c:	6839      	ldr	r1, [r7, #0]
 800044e:	6849      	ldr	r1, [r1, #4]
 8000450:	b289      	uxth	r1, r1
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8000452:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000454:	3248      	adds	r2, #72	; 0x48
 8000456:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	6892      	ldr	r2, [r2, #8]
 8000466:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
 8000468:	683a      	ldr	r2, [r7, #0]
 800046a:	6812      	ldr	r2, [r2, #0]
 800046c:	b292      	uxth	r2, r2
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 800046e:	4302      	orrs	r2, r0
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000470:	3348      	adds	r3, #72	; 0x48
 8000472:	00db      	lsls	r3, r3, #3
 8000474:	440b      	add	r3, r1
 8000476:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	69db      	ldr	r3, [r3, #28]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d126      	bne.n	80004ce <HAL_CAN_ConfigFilter+0xfe>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	6812      	ldr	r2, [r2, #0]
 8000488:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	430a      	orrs	r2, r1
 8000490:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	683a      	ldr	r2, [r7, #0]
 800049a:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800049c:	6839      	ldr	r1, [r7, #0]
 800049e:	6809      	ldr	r1, [r1, #0]
 80004a0:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 80004a2:	6839      	ldr	r1, [r7, #0]
 80004a4:	6849      	ldr	r1, [r1, #4]
 80004a6:	b289      	uxth	r1, r1
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 80004a8:	4301      	orrs	r1, r0
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80004aa:	3248      	adds	r2, #72	; 0x48
 80004ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6819      	ldr	r1, [r3, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80004b8:	683a      	ldr	r2, [r7, #0]
 80004ba:	6892      	ldr	r2, [r2, #8]
 80004bc:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	68d2      	ldr	r2, [r2, #12]
 80004c2:	b292      	uxth	r2, r2
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80004c4:	4302      	orrs	r2, r0
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80004c6:	3348      	adds	r3, #72	; 0x48
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	440b      	add	r3, r1
 80004cc:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d10b      	bne.n	80004ee <HAL_CAN_ConfigFilter+0x11e>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	6812      	ldr	r2, [r2, #0]
 80004de:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	400a      	ands	r2, r1
 80004e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80004ec:	e009      	b.n	8000502 <HAL_CAN_ConfigFilter+0x132>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	6812      	ldr	r2, [r2, #0]
 80004f6:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d10b      	bne.n	8000522 <HAL_CAN_ConfigFilter+0x152>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	6812      	ldr	r2, [r2, #0]
 8000512:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	43d2      	mvns	r2, r2
 800051a:	400a      	ands	r2, r1
 800051c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000520:	e009      	b.n	8000536 <HAL_CAN_ConfigFilter+0x166>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	430a      	orrs	r2, r1
 8000532:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	6a1b      	ldr	r3, [r3, #32]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d109      	bne.n	8000552 <HAL_CAN_ConfigFilter+0x182>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	6812      	ldr	r2, [r2, #0]
 8000546:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	430a      	orrs	r2, r1
 800054e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	6812      	ldr	r2, [r2, #0]
 800055a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800055e:	f022 0201 	bic.w	r2, r2, #1
 8000562:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b01      	cmp	r3, #1
 800058a:	d005      	beq.n	8000598 <HAL_CAN_Receive_IT+0x24>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b12      	cmp	r3, #18
 8000596:	d13f      	bne.n	8000618 <HAL_CAN_Receive_IT+0xa4>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d101      	bne.n	80005a6 <HAL_CAN_Receive_IT+0x32>
 80005a2:	2302      	movs	r3, #2
 80005a4:	e03b      	b.n	800061e <HAL_CAN_Receive_IT+0xaa>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2201      	movs	r2, #1
 80005aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b12      	cmp	r3, #18
 80005b8:	d104      	bne.n	80005c4 <HAL_CAN_Receive_IT+0x50>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2232      	movs	r2, #50	; 0x32
 80005be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80005c2:	e003      	b.n	80005cc <HAL_CAN_Receive_IT+0x58>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2222      	movs	r2, #34	; 0x22
 80005c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
    
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	63da      	str	r2, [r3, #60]	; 0x3c
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6153      	str	r3, [r2, #20]
                              CAN_IT_LEC |
                              CAN_IT_ERR |
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if(FIFONumber == CAN_FIFO0)
 80005ee:	78fb      	ldrb	r3, [r7, #3]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d108      	bne.n	8000606 <HAL_CAN_Receive_IT+0x92>
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	6952      	ldr	r2, [r2, #20]
 80005fe:	f042 0202 	orr.w	r2, r2, #2
 8000602:	615a      	str	r2, [r3, #20]
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);

    if(FIFONumber == CAN_FIFO0)
 8000604:	e00a      	b.n	800061c <HAL_CAN_Receive_IT+0xa8>
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
    }
    else
    {
      /* Enable FIFO 1 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	6952      	ldr	r2, [r2, #20]
 8000610:	f042 0210 	orr.w	r2, r2, #16
 8000614:	615a      	str	r2, [r3, #20]
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);

    if(FIFONumber == CAN_FIFO0)
 8000616:	e001      	b.n	800061c <HAL_CAN_Receive_IT+0xa8>
    }
    
  }
  else
  {
    return HAL_BUSY;
 8000618:	2302      	movs	r3, #2
 800061a:	e000      	b.n	800061e <HAL_CAN_Receive_IT+0xaa>
  }
  
  /* Return function status */
  return HAL_OK;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d01a      	beq.n	8000674 <HAL_CAN_IRQHandler+0x4c>
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	4b7f      	ldr	r3, [pc, #508]	; (8000844 <HAL_CAN_IRQHandler+0x21c>)
 8000646:	4013      	ands	r3, r2
 8000648:	4a7e      	ldr	r2, [pc, #504]	; (8000844 <HAL_CAN_IRQHandler+0x21c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d00f      	beq.n	800066e <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	689a      	ldr	r2, [r3, #8]
 8000654:	4b7c      	ldr	r3, [pc, #496]	; (8000848 <HAL_CAN_IRQHandler+0x220>)
 8000656:	4013      	ands	r3, r2
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8000658:	4a7b      	ldr	r2, [pc, #492]	; (8000848 <HAL_CAN_IRQHandler+0x220>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d007      	beq.n	800066e <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	4b79      	ldr	r3, [pc, #484]	; (800084c <HAL_CAN_IRQHandler+0x224>)
 8000666:	4013      	ands	r3, r2
{
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8000668:	4a78      	ldr	r2, [pc, #480]	; (800084c <HAL_CAN_IRQHandler+0x224>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d102      	bne.n	8000674 <HAL_CAN_IRQHandler+0x4c>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
    {
      /* Call transmit function */
      CAN_Transmit_IT(hcan);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 f8f8 	bl	8000864 <CAN_Transmit_IT>
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00a      	beq.n	8000698 <HAL_CAN_IRQHandler+0x70>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	f003 0303 	and.w	r3, r3, #3
      CAN_Transmit_IT(hcan);
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 800068c:	2b00      	cmp	r3, #0
 800068e:	d003      	beq.n	8000698 <HAL_CAN_IRQHandler+0x70>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8000690:	2100      	movs	r1, #0
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f918 	bl	80008c8 <CAN_Receive_IT>
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f003 0310 	and.w	r3, r3, #16
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00a      	beq.n	80006bc <HAL_CAN_IRQHandler+0x94>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	f003 0303 	and.w	r3, r3, #3
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d003      	beq.n	80006bc <HAL_CAN_IRQHandler+0x94>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 80006b4:	2101      	movs	r1, #1
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f906 	bl	80008c8 <CAN_Receive_IT>
  }
  
  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d013      	beq.n	80006f2 <HAL_CAN_IRQHandler+0xca>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
  }
  
  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00c      	beq.n	80006f2 <HAL_CAN_IRQHandler+0xca>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    CAN_Receive_IT(hcan, CAN_FIFO1);
  }
  
  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d005      	beq.n	80006f2 <HAL_CAN_IRQHandler+0xca>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ea:	f043 0201 	orr.w	r2, r3, #1
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d013      	beq.n	8000728 <HAL_CAN_IRQHandler+0x100>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 7300 	and.w	r3, r3, #512	; 0x200
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00c      	beq.n	8000728 <HAL_CAN_IRQHandler+0x100>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000718:	2b00      	cmp	r3, #0
 800071a:	d005      	beq.n	8000728 <HAL_CAN_IRQHandler+0x100>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000720:	f043 0202 	orr.w	r2, r3, #2
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	2b00      	cmp	r3, #0
 8000734:	d013      	beq.n	800075e <HAL_CAN_IRQHandler+0x136>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00c      	beq.n	800075e <HAL_CAN_IRQHandler+0x136>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 800074e:	2b00      	cmp	r3, #0
 8000750:	d005      	beq.n	800075e <HAL_CAN_IRQHandler+0x136>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000756:	f043 0204 	orr.w	r2, r3, #4
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000768:	2b00      	cmp	r3, #0
 800076a:	d054      	beq.n	8000816 <HAL_CAN_IRQHandler+0x1ee>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000776:	2b00      	cmp	r3, #0
 8000778:	d04d      	beq.n	8000816 <HAL_CAN_IRQHandler+0x1ee>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8000784:	2b00      	cmp	r3, #0
 8000786:	d046      	beq.n	8000816 <HAL_CAN_IRQHandler+0x1ee>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000792:	2b30      	cmp	r3, #48	; 0x30
 8000794:	d01b      	beq.n	80007ce <HAL_CAN_IRQHandler+0x1a6>
 8000796:	2b30      	cmp	r3, #48	; 0x30
 8000798:	d804      	bhi.n	80007a4 <HAL_CAN_IRQHandler+0x17c>
 800079a:	2b10      	cmp	r3, #16
 800079c:	d009      	beq.n	80007b2 <HAL_CAN_IRQHandler+0x18a>
 800079e:	2b20      	cmp	r3, #32
 80007a0:	d00e      	beq.n	80007c0 <HAL_CAN_IRQHandler+0x198>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 80007a2:	e030      	b.n	8000806 <HAL_CAN_IRQHandler+0x1de>
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 80007a4:	2b50      	cmp	r3, #80	; 0x50
 80007a6:	d020      	beq.n	80007ea <HAL_CAN_IRQHandler+0x1c2>
 80007a8:	2b60      	cmp	r3, #96	; 0x60
 80007aa:	d025      	beq.n	80007f8 <HAL_CAN_IRQHandler+0x1d0>
 80007ac:	2b40      	cmp	r3, #64	; 0x40
 80007ae:	d015      	beq.n	80007dc <HAL_CAN_IRQHandler+0x1b4>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 80007b0:	e029      	b.n	8000806 <HAL_CAN_IRQHandler+0x1de>
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
    {
      case(CAN_ESR_LEC_0):
          /* Set CAN error code to STF error */
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007b6:	f043 0208 	orr.w	r2, r3, #8
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80007be:	e022      	b.n	8000806 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_1):
          /* Set CAN error code to FOR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007c4:	f043 0210 	orr.w	r2, r3, #16
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80007cc:	e01b      	b.n	8000806 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
          /* Set CAN error code to ACK error */
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007d2:	f043 0220 	orr.w	r2, r3, #32
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80007da:	e014      	b.n	8000806 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_2):
          /* Set CAN error code to BR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80007e8:	e00d      	b.n	8000806 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
          /* Set CAN error code to BD error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80007f6:	e006      	b.n	8000806 <HAL_CAN_IRQHandler+0x1de>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000804:	bf00      	nop
      default:
          break;
    }

    /* Clear Last error code Flag */ 
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	6992      	ldr	r2, [r2, #24]
 8000810:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000814:	619a      	str	r2, [r3, #24]
  }
  
  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00e      	beq.n	800083c <HAL_CAN_IRQHandler+0x214>
  {
    /* Clear ERRI Flag */ 
    hcan->Instance->MSR |= CAN_MSR_ERRI; 
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	6852      	ldr	r2, [r2, #4]
 8000828:	f042 0204 	orr.w	r2, r2, #4
 800082c:	605a      	str	r2, [r3, #4]
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2201      	movs	r2, #1
 8000832:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 f80a 	bl	8000850 <HAL_CAN_ErrorCallback>
  }  
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	04000003 	.word	0x04000003
 8000848:	08000300 	.word	0x08000300
 800084c:	10030000 	.word	0x10030000

08000850 <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback can be implemented in the user file
   */
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop

08000864 <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	6952      	ldr	r2, [r2, #20]
 8000876:	f022 0201 	bic.w	r2, r2, #1
 800087a:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b12      	cmp	r3, #18
 8000886:	d107      	bne.n	8000898 <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	6952      	ldr	r2, [r2, #20]
 8000892:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000896:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b32      	cmp	r3, #50	; 0x32
 80008a2:	d104      	bne.n	80008ae <CAN_Transmit_IT+0x4a>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2222      	movs	r2, #34	; 0x22
 80008a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80008ac:	e003      	b.n	80008b6 <CAN_Transmit_IT+0x52>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2201      	movs	r2, #1
 80008b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f002 fc24 	bl	8003104 <HAL_CAN_TxCpltCallback>
  
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop

080008c8 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	6811      	ldr	r1, [r2, #0]
 80008dc:	78fa      	ldrb	r2, [r7, #3]
 80008de:	321b      	adds	r2, #27
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	440a      	add	r2, r1
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	f002 0204 	and.w	r2, r2, #4
 80008ea:	609a      	str	r2, [r3, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10b      	bne.n	800090e <CAN_Receive_IT+0x46>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	6811      	ldr	r1, [r2, #0]
 80008fe:	78fa      	ldrb	r2, [r7, #3]
 8000900:	321b      	adds	r2, #27
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	440a      	add	r2, r1
 8000906:	6812      	ldr	r2, [r2, #0]
 8000908:	0d52      	lsrs	r2, r2, #21
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	e00a      	b.n	8000924 <CAN_Receive_IT+0x5c>
  }
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	6811      	ldr	r1, [r2, #0]
 8000916:	78fa      	ldrb	r2, [r7, #3]
 8000918:	321b      	adds	r2, #27
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	440a      	add	r2, r1
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	08d2      	lsrs	r2, r2, #3
 8000922:	605a      	str	r2, [r3, #4]
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6811      	ldr	r1, [r2, #0]
 800092c:	78fa      	ldrb	r2, [r7, #3]
 800092e:	321b      	adds	r2, #27
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	440a      	add	r2, r1
 8000934:	6812      	ldr	r2, [r2, #0]
 8000936:	f002 0202 	and.w	r2, r2, #2
 800093a:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	6811      	ldr	r1, [r2, #0]
 8000944:	78fa      	ldrb	r2, [r7, #3]
 8000946:	321b      	adds	r2, #27
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	440a      	add	r2, r1
 800094c:	3204      	adds	r2, #4
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	f002 020f 	and.w	r2, r2, #15
 8000954:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	6811      	ldr	r1, [r2, #0]
 800095e:	78fa      	ldrb	r2, [r7, #3]
 8000960:	321b      	adds	r2, #27
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	440a      	add	r2, r1
 8000966:	3204      	adds	r2, #4
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	0a12      	lsrs	r2, r2, #8
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	61da      	str	r2, [r3, #28]
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	6811      	ldr	r1, [r2, #0]
 8000978:	78fa      	ldrb	r2, [r7, #3]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	440a      	add	r2, r1
 800097e:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000982:	6812      	ldr	r2, [r2, #0]
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	751a      	strb	r2, [r3, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	6811      	ldr	r1, [r2, #0]
 8000990:	78fa      	ldrb	r2, [r7, #3]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	440a      	add	r2, r1
 8000996:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	0a12      	lsrs	r2, r2, #8
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	755a      	strb	r2, [r3, #21]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	6811      	ldr	r1, [r2, #0]
 80009aa:	78fa      	ldrb	r2, [r7, #3]
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	440a      	add	r2, r1
 80009b0:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	0c12      	lsrs	r2, r2, #16
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	759a      	strb	r2, [r3, #22]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	6811      	ldr	r1, [r2, #0]
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	440a      	add	r2, r1
 80009ca:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	0e12      	lsrs	r2, r2, #24
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	75da      	strb	r2, [r3, #23]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6811      	ldr	r1, [r2, #0]
 80009de:	78fa      	ldrb	r2, [r7, #3]
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	440a      	add	r2, r1
 80009e4:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	761a      	strb	r2, [r3, #24]
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	6811      	ldr	r1, [r2, #0]
 80009f6:	78fa      	ldrb	r2, [r7, #3]
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	440a      	add	r2, r1
 80009fc:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	0a12      	lsrs	r2, r2, #8
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	765a      	strb	r2, [r3, #25]
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	6811      	ldr	r1, [r2, #0]
 8000a10:	78fa      	ldrb	r2, [r7, #3]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	440a      	add	r2, r1
 8000a16:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000a1a:	6812      	ldr	r2, [r2, #0]
 8000a1c:	0c12      	lsrs	r2, r2, #16
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	769a      	strb	r2, [r3, #26]
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	6811      	ldr	r1, [r2, #0]
 8000a2a:	78fa      	ldrb	r2, [r7, #3]
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	440a      	add	r2, r1
 8000a30:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	0e12      	lsrs	r2, r2, #24
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	76da      	strb	r2, [r3, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d110      	bne.n	8000a64 <CAN_Receive_IT+0x19c>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	68d2      	ldr	r2, [r2, #12]
 8000a4c:	f042 0220 	orr.w	r2, r2, #32
 8000a50:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	6812      	ldr	r2, [r2, #0]
 8000a5a:	6952      	ldr	r2, [r2, #20]
 8000a5c:	f022 0202 	bic.w	r2, r2, #2
 8000a60:	615a      	str	r2, [r3, #20]
 8000a62:	e00f      	b.n	8000a84 <CAN_Receive_IT+0x1bc>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	6912      	ldr	r2, [r2, #16]
 8000a6e:	f042 0220 	orr.w	r2, r2, #32
 8000a72:	611a      	str	r2, [r3, #16]
    
    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	6952      	ldr	r2, [r2, #20]
 8000a7e:	f022 0210 	bic.w	r2, r2, #16
 8000a82:	615a      	str	r2, [r3, #20]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b22      	cmp	r3, #34	; 0x22
 8000a8e:	d107      	bne.n	8000aa0 <CAN_Receive_IT+0x1d8>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	6952      	ldr	r2, [r2, #20]
 8000a9a:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000a9e:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b32      	cmp	r3, #50	; 0x32
 8000aaa:	d104      	bne.n	8000ab6 <CAN_Receive_IT+0x1ee>
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2212      	movs	r2, #18
 8000ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000ab4:	e003      	b.n	8000abe <CAN_Receive_IT+0x1f6>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f002 fb30 	bl	8003124 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop

08000ad0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b24:	0a1b      	lsrs	r3, r3, #8
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <NVIC_EnableIRQ+0x2c>)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	095b      	lsrs	r3, r3, #5
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	f002 021f 	and.w	r2, r2, #31
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da0b      	bge.n	8000b90 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <NVIC_SetPriority+0x4c>)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 030f 	and.w	r3, r3, #15
 8000b80:	3b04      	subs	r3, #4
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8e:	e009      	b.n	8000ba4 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <NVIC_SetPriority+0x50>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	2201      	movs	r2, #1
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfe:	2101      	movs	r1, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	1e59      	subs	r1, r3, #1
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000c0c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c28:	d301      	bcc.n	8000c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00f      	b.n	8000c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <SysTick_Config+0x40>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c36:	210f      	movs	r1, #15
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f7ff ff92 	bl	8000b64 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SysTick_Config+0x40>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SysTick_Config+0x40>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff33 	bl	8000ad0 <NVIC_SetPriorityGrouping>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop

08000c74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c86:	f7ff ff47 	bl	8000b18 <NVIC_GetPriorityGrouping>
 8000c8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	6978      	ldr	r0, [r7, #20]
 8000c92:	f7ff ff91 	bl	8000bb8 <NVIC_EncodePriority>
 8000c96:	4602      	mov	r2, r0
 8000c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff60 	bl	8000b64 <NVIC_SetPriority>
}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff3a 	bl	8000b34 <NVIC_EnableIRQ>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffa1 	bl	8000c18 <SysTick_Config>
 8000cd6:	4603      	mov	r3, r0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d106      	bne.n	8000cfc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000cfa:	e005      	b.n	8000d08 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cfc:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 0304 	bic.w	r3, r3, #4
 8000d06:	6013      	str	r3, [r2, #0]
  }
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d1c:	f000 f802 	bl	8000d24 <HAL_SYSTICK_Callback>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
 8000d52:	e127      	b.n	8000fa4 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d54:	2201      	movs	r2, #1
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f040 8116 	bne.w	8000f9e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d034      	beq.n	8000de4 <HAL_GPIO_Init+0xb4>
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d80d      	bhi.n	8000d9a <HAL_GPIO_Init+0x6a>
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d02b      	beq.n	8000dda <HAL_GPIO_Init+0xaa>
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d804      	bhi.n	8000d90 <HAL_GPIO_Init+0x60>
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d031      	beq.n	8000dee <HAL_GPIO_Init+0xbe>
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d01c      	beq.n	8000dc8 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8e:	e048      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d043      	beq.n	8000e1c <HAL_GPIO_Init+0xec>
 8000d94:	2b11      	cmp	r3, #17
 8000d96:	d01b      	beq.n	8000dd0 <HAL_GPIO_Init+0xa0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000d98:	e043      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d9a:	4a87      	ldr	r2, [pc, #540]	; (8000fb8 <HAL_GPIO_Init+0x288>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d026      	beq.n	8000dee <HAL_GPIO_Init+0xbe>
 8000da0:	4a85      	ldr	r2, [pc, #532]	; (8000fb8 <HAL_GPIO_Init+0x288>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d806      	bhi.n	8000db4 <HAL_GPIO_Init+0x84>
 8000da6:	4a85      	ldr	r2, [pc, #532]	; (8000fbc <HAL_GPIO_Init+0x28c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d020      	beq.n	8000dee <HAL_GPIO_Init+0xbe>
 8000dac:	4a84      	ldr	r2, [pc, #528]	; (8000fc0 <HAL_GPIO_Init+0x290>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d01d      	beq.n	8000dee <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000db2:	e036      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000db4:	4a83      	ldr	r2, [pc, #524]	; (8000fc4 <HAL_GPIO_Init+0x294>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d019      	beq.n	8000dee <HAL_GPIO_Init+0xbe>
 8000dba:	4a83      	ldr	r2, [pc, #524]	; (8000fc8 <HAL_GPIO_Init+0x298>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d016      	beq.n	8000dee <HAL_GPIO_Init+0xbe>
 8000dc0:	4a82      	ldr	r2, [pc, #520]	; (8000fcc <HAL_GPIO_Init+0x29c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d013      	beq.n	8000dee <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000dc6:	e02c      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e028      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	623b      	str	r3, [r7, #32]
          break;
 8000dd8:	e023      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	3308      	adds	r3, #8
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e01e      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	330c      	adds	r3, #12
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e019      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <HAL_GPIO_Init+0xcc>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000df6:	2304      	movs	r3, #4
 8000df8:	623b      	str	r3, [r7, #32]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
          }
          break; 
 8000dfa:	e012      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d105      	bne.n	8000e10 <HAL_GPIO_Init+0xe0>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e04:	2308      	movs	r3, #8
 8000e06:	623b      	str	r3, [r7, #32]
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69fa      	ldr	r2, [r7, #28]
 8000e0c:	611a      	str	r2, [r3, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
          }
          break; 
 8000e0e:	e008      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e10:	2308      	movs	r3, #8
 8000e12:	623b      	str	r3, [r7, #32]
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	615a      	str	r2, [r3, #20]
          }
          break; 
 8000e1a:	e002      	b.n	8000e22 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
          break;
 8000e20:	bf00      	nop
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	2bff      	cmp	r3, #255	; 0xff
 8000e26:	d801      	bhi.n	8000e2c <HAL_GPIO_Init+0xfc>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	e001      	b.n	8000e30 <HAL_GPIO_Init+0x100>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	2bff      	cmp	r3, #255	; 0xff
 8000e36:	d802      	bhi.n	8000e3e <HAL_GPIO_Init+0x10e>
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	e002      	b.n	8000e44 <HAL_GPIO_Init+0x114>
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	3b08      	subs	r3, #8
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	401a      	ands	r2, r3
 8000e56:	6a39      	ldr	r1, [r7, #32]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 8096 	beq.w	8000f9e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e72:	4a57      	ldr	r2, [pc, #348]	; (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000e74:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6193      	str	r3, [r2, #24]
 8000e7e:	4b54      	ldr	r3, [pc, #336]	; (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8000e8a:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <HAL_GPIO_Init+0x2a4>)
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a49      	ldr	r2, [pc, #292]	; (8000fd8 <HAL_GPIO_Init+0x2a8>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x1ae>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <HAL_GPIO_Init+0x2ac>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x1aa>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x1a6>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a46      	ldr	r2, [pc, #280]	; (8000fe4 <HAL_GPIO_Init+0x2b4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x1a2>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x1b0>
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x1b0>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x1b0>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x1b0>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8000ef0:	4938      	ldr	r1, [pc, #224]	; (8000fd4 <HAL_GPIO_Init+0x2a4>)
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000f0a:	4937      	ldr	r1, [pc, #220]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000f18:	4933      	ldr	r1, [pc, #204]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f1a:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4013      	ands	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000f32:	492d      	ldr	r1, [pc, #180]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	604b      	str	r3, [r1, #4]
 8000f3e:	e006      	b.n	8000f4e <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000f40:	4929      	ldr	r1, [pc, #164]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f42:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000f5a:	4923      	ldr	r1, [pc, #140]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	608b      	str	r3, [r1, #8]
 8000f66:	e006      	b.n	8000f76 <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000f68:	491f      	ldr	r1, [pc, #124]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4013      	ands	r3, r2
 8000f74:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000f82:	4919      	ldr	r1, [pc, #100]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	60cb      	str	r3, [r1, #12]
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000f90:	4915      	ldr	r1, [pc, #84]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60cb      	str	r3, [r1, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	f67f aed4 	bls.w	8000d54 <HAL_GPIO_Init+0x24>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8000fac:	bf00      	nop
 8000fae:	372c      	adds	r7, #44	; 0x2c
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	10210000 	.word	0x10210000
 8000fbc:	10110000 	.word	0x10110000
 8000fc0:	10120000 	.word	0x10120000
 8000fc4:	10310000 	.word	0x10310000
 8000fc8:	10320000 	.word	0x10320000
 8000fcc:	10220000 	.word	0x10220000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40011400 	.word	0x40011400
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	611a      	str	r2, [r3, #16]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b0e5      	sub	sp, #404	; 0x194
 8001020:	af00      	add	r7, sp, #0
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8175 	beq.w	8001326 <HAL_RCC_OscConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800103c:	4bb8      	ldr	r3, [pc, #736]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b04      	cmp	r3, #4
 8001046:	d00b      	beq.n	8001060 <HAL_RCC_OscConfig+0x44>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001048:	4bb5      	ldr	r3, [pc, #724]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b08      	cmp	r3, #8
 8001052:	d15f      	bne.n	8001114 <HAL_RCC_OscConfig+0xf8>
 8001054:	4bb2      	ldr	r3, [pc, #712]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d059      	beq.n	8001114 <HAL_RCC_OscConfig+0xf8>
 8001060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	b25b      	sxtb	r3, r3
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	b25b      	sxtb	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x78>
 800108e:	4ba4      	ldr	r3, [pc, #656]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e01b      	b.n	80010cc <HAL_RCC_OscConfig+0xb0>
 8001094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001098:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	f043 0320 	orr.w	r3, r3, #32
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d102      	bne.n	80010c8 <HAL_RCC_OscConfig+0xac>
 80010c2:	4b97      	ldr	r3, [pc, #604]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	e001      	b.n	80010cc <HAL_RCC_OscConfig+0xb0>
 80010c8:	4b95      	ldr	r3, [pc, #596]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d0:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80010d8:	fa92 f2a2 	rbit	r2, r2
 80010dc:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80010e4:	fab2 f282 	clz	r2, r2
 80010e8:	b252      	sxtb	r2, r2
 80010ea:	f042 0220 	orr.w	r2, r2, #32
 80010ee:	b252      	sxtb	r2, r2
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	f002 021f 	and.w	r2, r2, #31
 80010f6:	40d3      	lsrs	r3, r2
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8111 	beq.w	8001324 <HAL_RCC_OscConfig+0x308>
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 810b 	bne.w	8001324 <HAL_RCC_OscConfig+0x308>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	f000 be9d 	b.w	8001e4e <HAL_RCC_OscConfig+0xe32>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x112>
 8001120:	4a7f      	ldr	r2, [pc, #508]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001122:	4b7f      	ldr	r3, [pc, #508]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	e030      	b.n	8001190 <HAL_RCC_OscConfig+0x174>
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10c      	bne.n	8001152 <HAL_RCC_OscConfig+0x136>
 8001138:	4a79      	ldr	r2, [pc, #484]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 800113a:	4b79      	ldr	r3, [pc, #484]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4a76      	ldr	r2, [pc, #472]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001146:	4b76      	ldr	r3, [pc, #472]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e01e      	b.n	8001190 <HAL_RCC_OscConfig+0x174>
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x15c>
 800115e:	4a70      	ldr	r2, [pc, #448]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001160:	4b6f      	ldr	r3, [pc, #444]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4a6d      	ldr	r2, [pc, #436]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 800116c:	4b6c      	ldr	r3, [pc, #432]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0x174>
 8001178:	4a69      	ldr	r2, [pc, #420]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 800117a:	4b69      	ldr	r3, [pc, #420]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4a66      	ldr	r2, [pc, #408]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001186:	4b66      	ldr	r3, [pc, #408]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d060      	beq.n	800125c <HAL_RCC_OscConfig+0x240>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff f817 	bl	80001cc <HAL_GetTick>
 800119e:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	e00a      	b.n	80011ba <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff f812 	bl	80001cc <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d902      	bls.n	80011ba <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	f000 be4a 	b.w	8001e4e <HAL_RCC_OscConfig+0xe32>
 80011ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d102      	bne.n	80011ee <HAL_RCC_OscConfig+0x1d2>
 80011e8:	4b4d      	ldr	r3, [pc, #308]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	e01b      	b.n	8001226 <HAL_RCC_OscConfig+0x20a>
 80011ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b25b      	sxtb	r3, r3
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	b25b      	sxtb	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	095b      	lsrs	r3, r3, #5
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d102      	bne.n	8001222 <HAL_RCC_OscConfig+0x206>
 800121c:	4b40      	ldr	r3, [pc, #256]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	e001      	b.n	8001226 <HAL_RCC_OscConfig+0x20a>
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800122a:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001232:	fa92 f2a2 	rbit	r2, r2
 8001236:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800123a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800123e:	fab2 f282 	clz	r2, r2
 8001242:	b252      	sxtb	r2, r2
 8001244:	f042 0220 	orr.w	r2, r2, #32
 8001248:	b252      	sxtb	r2, r2
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	f002 021f 	and.w	r2, r2, #31
 8001250:	40d3      	lsrs	r3, r2
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0a4      	beq.n	80011a4 <HAL_RCC_OscConfig+0x188>
 800125a:	e064      	b.n	8001326 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7fe ffb6 	bl	80001cc <HAL_GetTick>
 8001260:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001264:	e00a      	b.n	800127c <HAL_RCC_OscConfig+0x260>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001266:	f7fe ffb1 	bl	80001cc <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d902      	bls.n	800127c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	f000 bde9 	b.w	8001e4e <HAL_RCC_OscConfig+0xe32>
 800127c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001280:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b25b      	sxtb	r3, r3
 800129a:	f043 0320 	orr.w	r3, r3, #32
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x294>
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	e01b      	b.n	80012e8 <HAL_RCC_OscConfig+0x2cc>
 80012b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012c8:	fab3 f383 	clz	r3, r3
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d102      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2c8>
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	e001      	b.n	80012e8 <HAL_RCC_OscConfig+0x2cc>
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_RCC_OscConfig+0x304>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012f4:	fa92 f2a2 	rbit	r2, r2
 80012f8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012fc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001300:	fab2 f282 	clz	r2, r2
 8001304:	b252      	sxtb	r2, r2
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	b252      	sxtb	r2, r2
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f002 021f 	and.w	r2, r2, #31
 8001312:	40d3      	lsrs	r3, r2
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1a4      	bne.n	8001266 <HAL_RCC_OscConfig+0x24a>
 800131c:	e003      	b.n	8001326 <HAL_RCC_OscConfig+0x30a>
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8198 	beq.w	8001666 <HAL_RCC_OscConfig+0x64a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001336:	4bbc      	ldr	r3, [pc, #752]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_RCC_OscConfig+0x33e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001342:	4bb9      	ldr	r3, [pc, #740]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b08      	cmp	r3, #8
 800134c:	d174      	bne.n	8001438 <HAL_RCC_OscConfig+0x41c>
 800134e:	4bb6      	ldr	r3, [pc, #728]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d16e      	bne.n	8001438 <HAL_RCC_OscConfig+0x41c>
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800136c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b25b      	sxtb	r3, r3
 8001376:	f043 0320 	orr.w	r3, r3, #32
 800137a:	b25b      	sxtb	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d102      	bne.n	800138c <HAL_RCC_OscConfig+0x370>
 8001386:	4ba8      	ldr	r3, [pc, #672]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	e01a      	b.n	80013c2 <HAL_RCC_OscConfig+0x3a6>
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800139e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x3a2>
 80013b8:	4b9b      	ldr	r3, [pc, #620]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	e001      	b.n	80013c2 <HAL_RCC_OscConfig+0x3a6>
 80013be:	4b9a      	ldr	r3, [pc, #616]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	2202      	movs	r2, #2
 80013c4:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80013cc:	fa92 f2a2 	rbit	r2, r2
 80013d0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013d4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80013d8:	fab2 f282 	clz	r2, r2
 80013dc:	b252      	sxtb	r2, r2
 80013de:	f042 0220 	orr.w	r2, r2, #32
 80013e2:	b252      	sxtb	r2, r2
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	f002 021f 	and.w	r2, r2, #31
 80013ea:	40d3      	lsrs	r3, r2
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <HAL_RCC_OscConfig+0x3e8>
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d002      	beq.n	8001404 <HAL_RCC_OscConfig+0x3e8>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	f000 bd25 	b.w	8001e4e <HAL_RCC_OscConfig+0xe32>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4888      	ldr	r0, [pc, #544]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 8001406:	4b88      	ldr	r3, [pc, #544]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6959      	ldr	r1, [r3, #20]
 8001414:	23f8      	movs	r3, #248	; 0xf8
 8001416:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001426:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e116      	b.n	8001666 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8094 	beq.w	800156c <HAL_RCC_OscConfig+0x550>
 8001444:	2301      	movs	r3, #1
 8001446:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001456:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145a:	fab3 f383 	clz	r3, r3
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001464:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001468:	461a      	mov	r2, r3
 800146a:	2301      	movs	r3, #1
 800146c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7fe fead 	bl	80001cc <HAL_GetTick>
 8001472:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7fe fea8 	bl	80001cc <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d902      	bls.n	800148e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	f000 bce0 	b.w	8001e4e <HAL_RCC_OscConfig+0xe32>
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001498:	fa93 f2a3 	rbit	r2, r3
 800149c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014a0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014a6:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	f043 0320 	orr.w	r3, r3, #32
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d102      	bne.n	80014c4 <HAL_RCC_OscConfig+0x4a8>
 80014be:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	e01c      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014d6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f043 0320 	orr.w	r3, r3, #32
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d102      	bne.n	80014fa <HAL_RCC_OscConfig+0x4de>
 80014f4:	4b4c      	ldr	r3, [pc, #304]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	e001      	b.n	80014fe <HAL_RCC_OscConfig+0x4e2>
 80014fa:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	2202      	movs	r2, #2
 8001500:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001508:	fa92 f1a2 	rbit	r1, r2
 800150c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001510:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001512:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	fab2 f282 	clz	r2, r2
 800151c:	b252      	sxtb	r2, r2
 800151e:	f042 0220 	orr.w	r2, r2, #32
 8001522:	b252      	sxtb	r2, r2
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	f002 021f 	and.w	r2, r2, #31
 800152a:	40d3      	lsrs	r3, r2
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0a1      	beq.n	8001478 <HAL_RCC_OscConfig+0x45c>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4c3c      	ldr	r4, [pc, #240]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6959      	ldr	r1, [r3, #20]
 8001544:	23f8      	movs	r3, #248	; 0xf8
 8001546:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800154e:	fa93 f0a3 	rbit	r0, r3
 8001552:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001556:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001558:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	6023      	str	r3, [r4, #0]
 800156a:	e07c      	b.n	8001666 <HAL_RCC_OscConfig+0x64a>
 800156c:	2301      	movs	r3, #1
 800156e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001576:	fa93 f2a3 	rbit	r2, r3
 800157a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800157e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001580:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001584:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001590:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001594:	461a      	mov	r2, r3
 8001596:	2300      	movs	r3, #0
 8001598:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7fe fe17 	bl	80001cc <HAL_GetTick>
 800159e:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a4:	f7fe fe12 	bl	80001cc <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d902      	bls.n	80015ba <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f000 bc4a 	b.w	8001e4e <HAL_RCC_OscConfig+0xe32>
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015c4:	fa93 f2a3 	rbit	r2, r3
 80015c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015cc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015d2:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	f043 0320 	orr.w	r3, r3, #32
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d102      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5d4>
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	e01f      	b.n	8001630 <HAL_RCC_OscConfig+0x614>
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80015fa:	fa93 f2a3 	rbit	r2, r3
 80015fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001602:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001604:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b25b      	sxtb	r3, r3
 8001610:	f043 0320 	orr.w	r3, r3, #32
 8001614:	b25b      	sxtb	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	095b      	lsrs	r3, r3, #5
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d105      	bne.n	800162c <HAL_RCC_OscConfig+0x610>
 8001620:	4b01      	ldr	r3, [pc, #4]	; (8001628 <HAL_RCC_OscConfig+0x60c>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	e004      	b.n	8001630 <HAL_RCC_OscConfig+0x614>
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	4bb7      	ldr	r3, [pc, #732]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	2202      	movs	r2, #2
 8001632:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800163a:	fa92 f1a2 	rbit	r1, r2
 800163e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001642:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001644:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	fab2 f282 	clz	r2, r2
 800164e:	b252      	sxtb	r2, r2
 8001650:	f042 0220 	orr.w	r2, r2, #32
 8001654:	b252      	sxtb	r2, r2
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	f002 021f 	and.w	r2, r2, #31
 800165c:	40d3      	lsrs	r3, r2
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d19e      	bne.n	80015a4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80f9 	beq.w	8001868 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d07b      	beq.n	8001778 <HAL_RCC_OscConfig+0x75c>
 8001680:	2301      	movs	r3, #1
 8001682:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800168a:	fa93 f2a3 	rbit	r2, r3
 800168e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001692:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001694:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001698:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169a:	fab3 f383 	clz	r3, r3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b9b      	ldr	r3, [pc, #620]	; (8001910 <HAL_RCC_OscConfig+0x8f4>)
 80016a4:	4413      	add	r3, r2
 80016a6:	461a      	mov	r2, r3
 80016a8:	2301      	movs	r3, #1
 80016aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7fe fd8e 	bl	80001cc <HAL_GetTick>
 80016b0:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b4:	e009      	b.n	80016ca <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b6:	f7fe fd89 	bl	80001cc <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e3c1      	b.n	8001e4e <HAL_RCC_OscConfig+0xe32>
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016d4:	fa93 f2a3 	rbit	r2, r3
 80016d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016dc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016e2:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d102      	bne.n	8001700 <HAL_RCC_OscConfig+0x6e4>
 80016fa:	4b84      	ldr	r3, [pc, #528]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	e01c      	b.n	800173a <HAL_RCC_OscConfig+0x71e>
 8001700:	2302      	movs	r3, #2
 8001702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800170a:	fa93 f2a3 	rbit	r2, r3
 800170e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001712:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001714:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b25b      	sxtb	r3, r3
 8001720:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001724:	b25b      	sxtb	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	095b      	lsrs	r3, r3, #5
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d102      	bne.n	8001736 <HAL_RCC_OscConfig+0x71a>
 8001730:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	e001      	b.n	800173a <HAL_RCC_OscConfig+0x71e>
 8001736:	4b75      	ldr	r3, [pc, #468]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	2202      	movs	r2, #2
 800173c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001744:	fa92 f1a2 	rbit	r1, r2
 8001748:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800174c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800174e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	b252      	sxtb	r2, r2
 800175a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800175e:	b252      	sxtb	r2, r2
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f002 021f 	and.w	r2, r2, #31
 8001766:	40d3      	lsrs	r3, r2
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0a2      	beq.n	80016b6 <HAL_RCC_OscConfig+0x69a>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f7fe fd35 	bl	80001e0 <HAL_Delay>
 8001776:	e077      	b.n	8001868 <HAL_RCC_OscConfig+0x84c>
 8001778:	2301      	movs	r3, #1
 800177a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800178a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800178c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001790:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	461a      	mov	r2, r3
 800179a:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <HAL_RCC_OscConfig+0x8f4>)
 800179c:	4413      	add	r3, r2
 800179e:	461a      	mov	r2, r3
 80017a0:	2300      	movs	r3, #0
 80017a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7fe fd12 	bl	80001cc <HAL_GetTick>
 80017a8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	e009      	b.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7fe fd0d 	bl	80001cc <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e345      	b.n	8001e4e <HAL_RCC_OscConfig+0xe32>
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017d4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017da:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_OscConfig+0x7dc>
 80017f2:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	e01c      	b.n	8001832 <HAL_RCC_OscConfig+0x816>
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800180a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800180c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b25b      	sxtb	r3, r3
 8001818:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d102      	bne.n	800182e <HAL_RCC_OscConfig+0x812>
 8001828:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	e001      	b.n	8001832 <HAL_RCC_OscConfig+0x816>
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	2202      	movs	r2, #2
 8001834:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800183c:	fa92 f1a2 	rbit	r1, r2
 8001840:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001844:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001846:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	fab2 f282 	clz	r2, r2
 8001850:	b252      	sxtb	r2, r2
 8001852:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001856:	b252      	sxtb	r2, r2
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f002 021f 	and.w	r2, r2, #31
 800185e:	40d3      	lsrs	r3, r2
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1a2      	bne.n	80017ae <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 813c 	beq.w	8001af0 <HAL_RCC_OscConfig+0xad4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	4a24      	ldr	r2, [pc, #144]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001882:	61d3      	str	r3, [r2, #28]
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	681b      	ldr	r3, [r3, #0]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001898:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_RCC_OscConfig+0x8f8>)
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_RCC_OscConfig+0x8f8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a4:	f7fe fc92 	bl	80001cc <HAL_GetTick>
 80018a8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018ac:	e009      	b.n	80018c2 <HAL_RCC_OscConfig+0x8a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7fe fc8d 	bl	80001cc <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x8a6>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e2c5      	b.n	8001e4e <HAL_RCC_OscConfig+0xe32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_RCC_OscConfig+0x8f8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ef      	beq.n	80018ae <HAL_RCC_OscConfig+0x892>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x8ca>
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	e036      	b.n	8001954 <HAL_RCC_OscConfig+0x938>
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d113      	bne.n	8001918 <HAL_RCC_OscConfig+0x8fc>
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	4a03      	ldr	r2, [pc, #12]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 80018fe:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RCC_OscConfig+0x8f0>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	e024      	b.n	8001954 <HAL_RCC_OscConfig+0x938>
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	42420480 	.word	0x42420480
 8001914:	40007000 	.word	0x40007000
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b05      	cmp	r3, #5
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x920>
 8001922:	4aac      	ldr	r2, [pc, #688]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001924:	4bab      	ldr	r3, [pc, #684]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	4aa9      	ldr	r2, [pc, #676]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001930:	4ba8      	ldr	r3, [pc, #672]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6213      	str	r3, [r2, #32]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0x938>
 800193c:	4aa5      	ldr	r2, [pc, #660]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 800193e:	4ba5      	ldr	r3, [pc, #660]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6213      	str	r3, [r2, #32]
 8001948:	4aa2      	ldr	r2, [pc, #648]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 800194a:	4ba2      	ldr	r3, [pc, #648]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	f023 0304 	bic.w	r3, r3, #4
 8001952:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d064      	beq.n	8001a28 <HAL_RCC_OscConfig+0xa0c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7fe fc35 	bl	80001cc <HAL_GetTick>
 8001962:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0x964>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7fe fc30 	bl	80001cc <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x964>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e266      	b.n	8001e4e <HAL_RCC_OscConfig+0xe32>
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800198a:	fa93 f2a3 	rbit	r2, r3
 800198e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001992:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001994:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001998:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_OscConfig+0x99a>
 80019b0:	4b88      	ldr	r3, [pc, #544]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	e01c      	b.n	80019f0 <HAL_RCC_OscConfig+0x9d4>
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019c0:	fa93 f2a3 	rbit	r2, r3
 80019c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019c8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d102      	bne.n	80019ec <HAL_RCC_OscConfig+0x9d0>
 80019e6:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	e001      	b.n	80019f0 <HAL_RCC_OscConfig+0x9d4>
 80019ec:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	2202      	movs	r2, #2
 80019f2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80019fa:	fa92 f1a2 	rbit	r1, r2
 80019fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001a02:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a04:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	fab2 f282 	clz	r2, r2
 8001a0e:	b252      	sxtb	r2, r2
 8001a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a14:	b252      	sxtb	r2, r2
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f002 021f 	and.w	r2, r2, #31
 8001a1c:	40d3      	lsrs	r3, r2
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0a0      	beq.n	8001968 <HAL_RCC_OscConfig+0x94c>
 8001a26:	e063      	b.n	8001af0 <HAL_RCC_OscConfig+0xad4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7fe fbd0 	bl	80001cc <HAL_GetTick>
 8001a2c:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0xa2e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7fe fbcb 	bl	80001cc <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xa2e>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e201      	b.n	8001e4e <HAL_RCC_OscConfig+0xe32>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a5c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a62:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_OscConfig+0xa64>
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	e01c      	b.n	8001aba <HAL_RCC_OscConfig+0xa9e>
 8001a80:	2302      	movs	r3, #2
 8001a82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001a8a:	fa93 f2a3 	rbit	r2, r3
 8001a8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a92:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_OscConfig+0xa9a>
 8001ab0:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	e001      	b.n	8001aba <HAL_RCC_OscConfig+0xa9e>
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	2202      	movs	r2, #2
 8001abc:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001ac4:	fa92 f1a2 	rbit	r1, r2
 8001ac8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001acc:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ace:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	fab2 f282 	clz	r2, r2
 8001ad8:	b252      	sxtb	r2, r2
 8001ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ade:	b252      	sxtb	r2, r2
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f002 021f 	and.w	r2, r2, #31
 8001ae6:	40d3      	lsrs	r3, r2
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1a0      	bne.n	8001a32 <HAL_RCC_OscConfig+0xa16>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 81a8 	beq.w	8001e4c <HAL_RCC_OscConfig+0xe30>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	f000 819f 	beq.w	8001e48 <HAL_RCC_OscConfig+0xe2c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	f040 811b 	bne.w	8001d4c <HAL_RCC_OscConfig+0xd30>
 8001b16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b2a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b30:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001b3c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001b40:	461a      	mov	r2, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe fb41 	bl	80001cc <HAL_GetTick>
 8001b4a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4e:	e009      	b.n	8001b64 <HAL_RCC_OscConfig+0xb48>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7fe fb3c 	bl	80001cc <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0xb48>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e174      	b.n	8001e4e <HAL_RCC_OscConfig+0xe32>
 8001b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b78:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b7e:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0xb80>
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e01f      	b.n	8001bdc <HAL_RCC_OscConfig+0xbc0>
 8001b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	f043 0320 	orr.w	r3, r3, #32
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d104      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xbbc>
 8001bce:	4b01      	ldr	r3, [pc, #4]	; (8001bd4 <HAL_RCC_OscConfig+0xbb8>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	e003      	b.n	8001bdc <HAL_RCC_OscConfig+0xbc0>
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	4b9f      	ldr	r3, [pc, #636]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be0:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001be8:	fa92 f1a2 	rbit	r1, r2
 8001bec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001bf0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bf2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	b252      	sxtb	r2, r2
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	b252      	sxtb	r2, r2
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	f002 021f 	and.w	r2, r2, #31
 8001c0a:	40d3      	lsrs	r3, r2
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d19d      	bne.n	8001b50 <HAL_RCC_OscConfig+0xb34>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1e:	d109      	bne.n	8001c34 <HAL_RCC_OscConfig+0xc18>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c20:	498d      	ldr	r1, [pc, #564]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001c22:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c34:	4888      	ldr	r0, [pc, #544]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001c36:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a19      	ldr	r1, [r3, #32]
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	6043      	str	r3, [r0, #4]
 8001c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c64:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6a:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001c76:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7fe faa4 	bl	80001cc <HAL_GetTick>
 8001c84:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_OscConfig+0xc82>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7fe fa9f 	bl	80001cc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xc82>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e0d7      	b.n	8001e4e <HAL_RCC_OscConfig+0xe32>
 8001c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	f043 0320 	orr.w	r3, r3, #32
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	095b      	lsrs	r3, r3, #5
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d102      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xcba>
 8001cd0:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	e01d      	b.n	8001d12 <HAL_RCC_OscConfig+0xcf6>
 8001cd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cec:	f107 0320 	add.w	r3, r7, #32
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	f043 0320 	orr.w	r3, r3, #32
 8001cfc:	b25b      	sxtb	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d102      	bne.n	8001d0e <HAL_RCC_OscConfig+0xcf2>
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	e001      	b.n	8001d12 <HAL_RCC_OscConfig+0xcf6>
 8001d0e:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d16:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001d1e:	fa92 f1a2 	rbit	r1, r2
 8001d22:	f107 021c 	add.w	r2, r7, #28
 8001d26:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d28:	f107 021c 	add.w	r2, r7, #28
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	b252      	sxtb	r2, r2
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	b252      	sxtb	r2, r2
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f002 021f 	and.w	r2, r2, #31
 8001d40:	40d3      	lsrs	r3, r2
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d09f      	beq.n	8001c8a <HAL_RCC_OscConfig+0xc6e>
 8001d4a:	e07f      	b.n	8001e4c <HAL_RCC_OscConfig+0xe30>
 8001d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f107 0318 	add.w	r3, r7, #24
 8001d60:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001d72:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001d76:	461a      	mov	r2, r3
 8001d78:	2300      	movs	r3, #0
 8001d7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7fe fa26 	bl	80001cc <HAL_GetTick>
 8001d80:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d84:	e009      	b.n	8001d9a <HAL_RCC_OscConfig+0xd7e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d86:	f7fe fa21 	bl	80001cc <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0xd7e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e059      	b.n	8001e4e <HAL_RCC_OscConfig+0xe32>
 8001d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_OscConfig+0xdb6>
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e01d      	b.n	8001e0e <HAL_RCC_OscConfig+0xdf2>
 8001dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_OscConfig+0xdee>
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	e001      	b.n	8001e0e <HAL_RCC_OscConfig+0xdf2>
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_RCC_OscConfig+0xe3c>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e12:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e1a:	fa92 f1a2 	rbit	r1, r2
 8001e1e:	f107 020c 	add.w	r2, r7, #12
 8001e22:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e24:	f107 020c 	add.w	r2, r7, #12
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	fab2 f282 	clz	r2, r2
 8001e2e:	b252      	sxtb	r2, r2
 8001e30:	f042 0220 	orr.w	r2, r2, #32
 8001e34:	b252      	sxtb	r2, r2
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	f002 021f 	and.w	r2, r2, #31
 8001e3c:	40d3      	lsrs	r3, r2
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d19f      	bne.n	8001d86 <HAL_RCC_OscConfig+0xd6a>
 8001e46:	e001      	b.n	8001e4c <HAL_RCC_OscConfig+0xe30>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0xe32>
    }
  }
  
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b098      	sub	sp, #96	; 0x60
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	65fb      	str	r3, [r7, #92]	; 0x5c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e6a:	4ba5      	ldr	r3, [pc, #660]	; (8002100 <HAL_RCC_ClockConfig+0x2a4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0207 	and.w	r2, r3, #7
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d210      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e78:	49a1      	ldr	r1, [pc, #644]	; (8002100 <HAL_RCC_ClockConfig+0x2a4>)
 8001e7a:	4ba1      	ldr	r3, [pc, #644]	; (8002100 <HAL_RCC_ClockConfig+0x2a4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 0207 	bic.w	r2, r3, #7
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e88:	4b9d      	ldr	r3, [pc, #628]	; (8002100 <HAL_RCC_ClockConfig+0x2a4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0207 	and.w	r2, r3, #7
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e18f      	b.n	80021ba <HAL_RCC_ClockConfig+0x35e>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea6:	4997      	ldr	r1, [pc, #604]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8001ea8:	4b96      	ldr	r3, [pc, #600]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8127 	beq.w	8002114 <HAL_RCC_ClockConfig+0x2b8>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d146      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x100>
 8001ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_ClockConfig+0x9e>
 8001ef4:	4b83      	ldr	r3, [pc, #524]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	e017      	b.n	8001f2a <HAL_RCC_ClockConfig+0xce>
 8001efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001efe:	65bb      	str	r3, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	f043 0320 	orr.w	r3, r3, #32
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xca>
 8001f20:	4b78      	ldr	r3, [pc, #480]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	e001      	b.n	8001f2a <HAL_RCC_ClockConfig+0xce>
 8001f26:	4b77      	ldr	r3, [pc, #476]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f2e:	657a      	str	r2, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f32:	fa92 f2a2 	rbit	r2, r2
 8001f36:	62ba      	str	r2, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b252      	sxtb	r2, r2
 8001f40:	f042 0220 	orr.w	r2, r2, #32
 8001f44:	b252      	sxtb	r2, r2
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	f002 021f 	and.w	r2, r2, #31
 8001f4c:	40d3      	lsrs	r3, r2
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 808f 	bne.w	8002076 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e12e      	b.n	80021ba <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d145      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x194>
 8001f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f68:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x134>
 8001f8a:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e017      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x164>
 8001f90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f94:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	f043 0320 	orr.w	r3, r3, #32
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d102      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x160>
 8001fb6:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	e001      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x164>
 8001fbc:	4b51      	ldr	r3, [pc, #324]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc4:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc8:	fa92 f2a2 	rbit	r2, r2
 8001fcc:	61fa      	str	r2, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	fab2 f282 	clz	r2, r2
 8001fd4:	b252      	sxtb	r2, r2
 8001fd6:	f042 0220 	orr.w	r2, r2, #32
 8001fda:	b252      	sxtb	r2, r2
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f002 021f 	and.w	r2, r2, #31
 8001fe2:	40d3      	lsrs	r3, r2
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d144      	bne.n	8002076 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0e4      	b.n	80021ba <HAL_RCC_ClockConfig+0x35e>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ffc:	69bb      	ldr	r3, [r7, #24]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b25b      	sxtb	r3, r3
 8002004:	f043 0320 	orr.w	r3, r3, #32
 8002008:	b25b      	sxtb	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d102      	bne.n	800201a <HAL_RCC_ClockConfig+0x1be>
 8002014:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	e016      	b.n	8002048 <HAL_RCC_ClockConfig+0x1ec>
 800201a:	2302      	movs	r3, #2
 800201c:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b25b      	sxtb	r3, r3
 800202e:	f043 0320 	orr.w	r3, r3, #32
 8002032:	b25b      	sxtb	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d102      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1e8>
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	e001      	b.n	8002048 <HAL_RCC_ClockConfig+0x1ec>
 8002044:	4b2f      	ldr	r3, [pc, #188]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2202      	movs	r2, #2
 800204a:	63fa      	str	r2, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800204e:	fa92 f2a2 	rbit	r2, r2
 8002052:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b252      	sxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b252      	sxtb	r2, r2
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f002 021f 	and.w	r2, r2, #31
 8002068:	40d3      	lsrs	r3, r2
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0a1      	b.n	80021ba <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4923      	ldr	r1, [pc, #140]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 0203 	bic.w	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002088:	f7fe f8a0 	bl	80001cc <HAL_GetTick>
 800208c:	65f8      	str	r0, [r7, #92]	; 0x5c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d112      	bne.n	80020bc <HAL_RCC_ClockConfig+0x260>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_ClockConfig+0x252>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002098:	f7fe f898 	bl	80001cc <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x252>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e085      	b.n	80021ba <HAL_RCC_ClockConfig+0x35e>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d1ee      	bne.n	8002098 <HAL_RCC_ClockConfig+0x23c>
 80020ba:	e02b      	b.n	8002114 <HAL_RCC_ClockConfig+0x2b8>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d121      	bne.n	8002108 <HAL_RCC_ClockConfig+0x2ac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_ClockConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c6:	f7fe f881 	bl	80001cc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_ClockConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e06e      	b.n	80021ba <HAL_RCC_ClockConfig+0x35e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x2a8>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d1ee      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x26a>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_ClockConfig+0x2b8>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ea:	f7fe f86f 	bl	80001cc <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d905      	bls.n	8002108 <HAL_RCC_ClockConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e05c      	b.n	80021ba <HAL_RCC_ClockConfig+0x35e>
 8002100:	40022000 	.word	0x40022000
 8002104:	40021000 	.word	0x40021000
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_RCC_ClockConfig+0x368>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ea      	bne.n	80020ea <HAL_RCC_ClockConfig+0x28e>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002114:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <HAL_RCC_ClockConfig+0x36c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0207 	and.w	r2, r3, #7
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d910      	bls.n	8002144 <HAL_RCC_ClockConfig+0x2e8>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4929      	ldr	r1, [pc, #164]	; (80021c8 <HAL_RCC_ClockConfig+0x36c>)
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_RCC_ClockConfig+0x36c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 0207 	bic.w	r2, r3, #7
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_RCC_ClockConfig+0x36c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0207 	and.w	r2, r3, #7
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x2e8>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e03a      	b.n	80021ba <HAL_RCC_ClockConfig+0x35e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	491c      	ldr	r1, [pc, #112]	; (80021c4 <HAL_RCC_ClockConfig+0x368>)
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_RCC_ClockConfig+0x368>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x326>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216e:	4915      	ldr	r1, [pc, #84]	; (80021c4 <HAL_RCC_ClockConfig+0x368>)
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_RCC_ClockConfig+0x368>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002182:	f000 f827 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002186:	4601      	mov	r1, r0
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_RCC_ClockConfig+0x368>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002190:	23f0      	movs	r3, #240	; 0xf0
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x370>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	fa21 f303 	lsr.w	r3, r1, r3
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_RCC_ClockConfig+0x374>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7fd ffe0 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3760      	adds	r7, #96	; 0x60
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40022000 	.word	0x40022000
 80021cc:	08003618 	.word	0x08003618
 80021d0:	20000000 	.word	0x20000000

080021d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	b490      	push	{r4, r7}
 80021d6:	b08e      	sub	sp, #56	; 0x38
 80021d8:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80021dc:	1d3c      	adds	r4, r7, #4
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80021e8:	4a33      	ldr	r2, [pc, #204]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xe4>)
 80021ea:	463b      	mov	r3, r7
 80021ec:	8812      	ldrh	r2, [r2, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f8:	2300      	movs	r3, #0
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8002204:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_GetSysClockFreq+0xe8>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b04      	cmp	r3, #4
 8002212:	d002      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x46>
 8002214:	2b08      	cmp	r3, #8
 8002216:	d003      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x4c>
 8002218:	e043      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xec>)
 800221c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800221e:	e043      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002226:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800222a:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002242:	4413      	add	r3, r2
 8002244:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01e      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0xbe>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCC_GetSysClockFreq+0xe8>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800225c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002260:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002278:	4413      	add	r3, r2
 800227a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xec>)
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	fbb2 f3f3 	udiv	r3, r2, r3
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
 8002290:	e004      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xc8>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022a0:	e002      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xec>)
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3738      	adds	r7, #56	; 0x38
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc90      	pop	{r4, r7}
 80022b2:	4770      	bx	lr
 80022b4:	08003604 	.word	0x08003604
 80022b8:	08003614 	.word	0x08003614
 80022bc:	40021000 	.word	0x40021000
 80022c0:	007a1200 	.word	0x007a1200
 80022c4:	003d0900 	.word	0x003d0900

080022c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022cc:	4b02      	ldr	r3, [pc, #8]	; (80022d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022e2:	f7ff fff1 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 80022e6:	4601      	mov	r1, r0
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022f4:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_RCC_GetPCLK1Freq+0x40>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	08003628 	.word	0x08003628

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002326:	f7ff ffcf 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 800232a:	4601      	mov	r1, r0
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002334:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002338:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x40>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	08003628 	.word	0x08003628

08002364 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e03b      	b.n	80023ee <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f001 f8a2 	bl	80034d4 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	68d2      	ldr	r2, [r2, #12]
 80023a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fc21 	bl	8002bf0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	6912      	ldr	r2, [r2, #16]
 80023b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	6952      	ldr	r2, [r2, #20]
 80023c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023cc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	68d2      	ldr	r2, [r2, #12]
 80023d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023dc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop

080023f8 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002412:	b2db      	uxtb	r3, r3
 8002414:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d003      	beq.n	8002424 <HAL_UART_Transmit+0x2c>
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b22      	cmp	r3, #34	; 0x22
 8002420:	f040 808d 	bne.w	800253e <HAL_UART_Transmit+0x146>
  {
    if((pData == NULL) || (Size == 0))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_UART_Transmit+0x38>
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e085      	b.n	8002540 <HAL_UART_Transmit+0x148>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_UART_Transmit+0x4a>
 800243e:	2302      	movs	r3, #2
 8002440:	e07e      	b.n	8002540 <HAL_UART_Transmit+0x148>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b22      	cmp	r3, #34	; 0x22
 800245a:	d104      	bne.n	8002466 <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2232      	movs	r2, #50	; 0x32
 8002460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002464:	e003      	b.n	800246e <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2212      	movs	r2, #18
 800246a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 800247a:	e03c      	b.n	80024f6 <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002490:	d11f      	bne.n	80024d2 <HAL_UART_Transmit+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2200      	movs	r2, #0
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f9fb 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_Transmit+0xb0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e04b      	b.n	8002540 <HAL_UART_Transmit+0x148>
        }
        tmp = (uint16_t*) pData;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	8812      	ldrh	r2, [r2, #0]
 80024b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <HAL_UART_Transmit+0xd2>
        {
          pData +=2;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3302      	adds	r3, #2
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	e015      	b.n	80024f6 <HAL_UART_Transmit+0xfe>
        }
        else
        { 
          pData +=1;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3301      	adds	r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	e011      	b.n	80024f6 <HAL_UART_Transmit+0xfe>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f9db 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_UART_Transmit+0xf0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e02b      	b.n	8002540 <HAL_UART_Transmit+0x148>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1c59      	adds	r1, r3, #1
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	6053      	str	r3, [r2, #4]
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1be      	bne.n	800247c <HAL_UART_Transmit+0x84>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2200      	movs	r2, #0
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f9c5 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_UART_Transmit+0x11c>
    { 
      return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e015      	b.n	8002540 <HAL_UART_Transmit+0x148>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b32      	cmp	r3, #50	; 0x32
 800251e:	d104      	bne.n	800252a <HAL_UART_Transmit+0x132>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2222      	movs	r2, #34	; 0x22
 8002524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002528:	e003      	b.n	8002532 <HAL_UART_Transmit+0x13a>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp_state = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002560:	b2db      	uxtb	r3, r3
 8002562:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d002      	beq.n	8002570 <HAL_UART_Transmit_IT+0x28>
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b22      	cmp	r3, #34	; 0x22
 800256e:	d13b      	bne.n	80025e8 <HAL_UART_Transmit_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_UART_Transmit_IT+0x34>
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_UART_Transmit_IT+0x38>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e034      	b.n	80025ea <HAL_UART_Transmit_IT+0xa2>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_UART_Transmit_IT+0x46>
 800258a:	2302      	movs	r3, #2
 800258c:	e02d      	b.n	80025ea <HAL_UART_Transmit_IT+0xa2>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b22      	cmp	r3, #34	; 0x22
 80025b8:	d104      	bne.n	80025c4 <HAL_UART_Transmit_IT+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2232      	movs	r2, #50	; 0x32
 80025be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80025c2:	e003      	b.n	80025cc <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2212      	movs	r2, #18
 80025c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	68d2      	ldr	r2, [r2, #12]
 80025de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e2:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp_state = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800260c:	b2db      	uxtb	r3, r3
 800260e:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d002      	beq.n	800261c <HAL_UART_Receive_IT+0x28>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d14b      	bne.n	80026b4 <HAL_UART_Receive_IT+0xc0>
  {
    if((pData == NULL ) || (Size == 0))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_UART_Receive_IT+0x34>
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_UART_Receive_IT+0x38>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e044      	b.n	80026b6 <HAL_UART_Receive_IT+0xc2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_UART_Receive_IT+0x46>
 8002636:	2302      	movs	r3, #2
 8002638:	e03d      	b.n	80026b6 <HAL_UART_Receive_IT+0xc2>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	88fa      	ldrh	r2, [r7, #6]
 8002652:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b12      	cmp	r3, #18
 8002664:	d104      	bne.n	8002670 <HAL_UART_Receive_IT+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2232      	movs	r2, #50	; 0x32
 800266a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800266e:	e003      	b.n	8002678 <HAL_UART_Receive_IT+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2222      	movs	r2, #34	; 0x22
 8002674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	68d2      	ldr	r2, [r2, #12]
 800268a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	6952      	ldr	r2, [r2, #20]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	f042 0220 	orr.w	r2, r2, #32
 80026ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <HAL_UART_Receive_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <HAL_UART_IRQHandler>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_flag = 0, tmp_it_source = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	613b      	str	r3, [r7, #16]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_UART_IRQHandler+0x4a>
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_UART_IRQHandler+0x4a>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	613b      	str	r3, [r7, #16]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_UART_IRQHandler+0x84>
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_UART_IRQHandler+0x84>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf14      	ite	ne
 8002752:	2301      	movne	r3, #1
 8002754:	2300      	moveq	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	617b      	str	r3, [r7, #20]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_UART_IRQHandler+0xb2>
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_UART_IRQHandler+0xb2>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	617b      	str	r3, [r7, #20]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_UART_IRQHandler+0xe0>
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_UART_IRQHandler+0xe0>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	f043 0208 	orr.w	r2, r3, #8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	613b      	str	r3, [r7, #16]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_UART_IRQHandler+0x114>
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_UART_IRQHandler+0x114>
  { 
    UART_Receive_IT(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f97a 	bl	8002ac8 <UART_Receive_IT>
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf14      	ite	ne
 80027e2:	2301      	movne	r3, #1
 80027e4:	2300      	moveq	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	613b      	str	r3, [r7, #16]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_UART_IRQHandler+0x148>
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_UART_IRQHandler+0x148>
  {
    UART_Transmit_IT(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8e0 	bl	80029c8 <UART_Transmit_IT>
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf14      	ite	ne
 8002816:	2301      	movne	r3, #1
 8002818:	2300      	moveq	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	613b      	str	r3, [r7, #16]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_UART_IRQHandler+0x17c>
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_UART_IRQHandler+0x17c>
  {
    UART_EndTransmit_IT(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f922 	bl	8002a80 <UART_EndTransmit_IT>
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00f      	beq.n	8002864 <HAL_UART_IRQHandler+0x1a4>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f80e 	bl	8002880 <HAL_UART_ErrorCallback>
  }  
}
 8002864:	bf00      	nop
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_UART_TxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback can be implemented in the user file
   */ 
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

08002880 <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback can be implemented in the user file
   */ 
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop

08002894 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80028a8:	f7fd fc90 	bl	80001cc <HAL_GetTick>
 80028ac:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d17b      	bne.n	80029ac <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80028b4:	e038      	b.n	8002928 <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d034      	beq.n	8002928 <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <UART_WaitOnFlagUntilTimeout+0x40>
 80028c4:	f7fd fc82 	bl	80001cc <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1ad2      	subs	r2, r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d929      	bls.n	8002928 <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	68d2      	ldr	r2, [r2, #12]
 80028de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028e2:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	68d2      	ldr	r2, [r2, #12]
 80028ee:	f022 0220 	bic.w	r2, r2, #32
 80028f2:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	68d2      	ldr	r2, [r2, #12]
 80028fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002902:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	6952      	ldr	r2, [r2, #20]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e04a      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0x12a>
  tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	401a      	ands	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	429a      	cmp	r2, r3
 8002936:	d1be      	bne.n	80028b6 <UART_WaitOnFlagUntilTimeout+0x22>
 8002938:	e040      	b.n	80029bc <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d034      	beq.n	80029ac <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <UART_WaitOnFlagUntilTimeout+0xc4>
 8002948:	f7fd fc40 	bl	80001cc <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	1ad2      	subs	r2, r2, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d929      	bls.n	80029ac <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002966:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	68d2      	ldr	r2, [r2, #12]
 8002972:	f022 0220 	bic.w	r2, r2, #32
 8002976:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	68d2      	ldr	r2, [r2, #12]
 8002982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002986:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	6952      	ldr	r2, [r2, #20]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e008      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0x12a>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	401a      	ands	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d0be      	beq.n	800293a <UART_WaitOnFlagUntilTimeout+0xa6>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop

080029c8 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b12      	cmp	r3, #18
 80029e2:	d002      	beq.n	80029ea <UART_Transmit_IT+0x22>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b32      	cmp	r3, #50	; 0x32
 80029e8:	d143      	bne.n	8002a72 <UART_Transmit_IT+0xaa>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f2:	d119      	bne.n	8002a28 <UART_Transmit_IT+0x60>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	60bb      	str	r3, [r7, #8]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	8812      	ldrh	r2, [r2, #0]
 8002a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a06:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <UART_Transmit_IT+0x54>
      {
        huart->pTxBuffPtr += 2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	1c9a      	adds	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	621a      	str	r2, [r3, #32]
 8002a1a:	e00e      	b.n	8002a3a <UART_Transmit_IT+0x72>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	621a      	str	r2, [r3, #32]
 8002a26:	e008      	b.n	8002a3a <UART_Transmit_IT+0x72>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	1c58      	adds	r0, r3, #1
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	6208      	str	r0, [r1, #32]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	84da      	strh	r2, [r3, #38]	; 0x26
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10f      	bne.n	8002a6e <UART_Transmit_IT+0xa6>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	68d2      	ldr	r2, [r2, #12]
 8002a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	68d2      	ldr	r2, [r2, #12]
 8002a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <UART_Transmit_IT+0xac>
  }
  else
  {
    return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
  }
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop

08002a80 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a96:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b32      	cmp	r3, #50	; 0x32
 8002aa2:	d104      	bne.n	8002aae <UART_EndTransmit_IT+0x2e>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2222      	movs	r2, #34	; 0x22
 8002aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002aac:	e003      	b.n	8002ab6 <UART_EndTransmit_IT+0x36>
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fed8 	bl	800286c <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop

08002ac8 <UART_Receive_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State; 
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b22      	cmp	r3, #34	; 0x22
 8002ae2:	d002      	beq.n	8002aea <UART_Receive_IT+0x22>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b32      	cmp	r3, #50	; 0x32
 8002ae8:	d17c      	bne.n	8002be4 <UART_Receive_IT+0x11c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af2:	d123      	bne.n	8002b3c <UART_Receive_IT+0x74>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	60bb      	str	r3, [r7, #8]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10e      	bne.n	8002b20 <UART_Receive_IT+0x58>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	1c9a      	adds	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b1e:	e029      	b.n	8002b74 <UART_Receive_IT+0xac>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
 8002b3a:	e01b      	b.n	8002b74 <UART_Receive_IT+0xac>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <UART_Receive_IT+0x92>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	1c59      	adds	r1, r3, #1
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6291      	str	r1, [r2, #40]	; 0x28
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	6852      	ldr	r2, [r2, #4]
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e00c      	b.n	8002b74 <UART_Receive_IT+0xac>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	1c59      	adds	r1, r3, #1
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6291      	str	r1, [r2, #40]	; 0x28
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	6852      	ldr	r2, [r2, #4]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d12b      	bne.n	8002be0 <UART_Receive_IT+0x118>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	f022 0220 	bic.w	r2, r2, #32
 8002b96:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b32      	cmp	r3, #50	; 0x32
 8002ba2:	d104      	bne.n	8002bae <UART_Receive_IT+0xe6>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2212      	movs	r2, #18
 8002ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002bac:	e013      	b.n	8002bd6 <UART_Receive_IT+0x10e>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	68d2      	ldr	r2, [r2, #12]
 8002bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bbc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	6952      	ldr	r2, [r2, #20]
 8002bc8:	f022 0201 	bic.w	r2, r2, #1
 8002bcc:	615a      	str	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa38 	bl	800304c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e002      	b.n	8002be6 <UART_Receive_IT+0x11e>
    }
    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <UART_Receive_IT+0x11e>
  }
  else
  {
    return HAL_BUSY; 
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop

08002bf0 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	6912      	ldr	r2, [r2, #16]
 8002c06:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68d2      	ldr	r2, [r2, #12]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c32:	f023 030c 	bic.w	r3, r3, #12
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	6952      	ldr	r2, [r2, #20]
 8002c46:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6992      	ldr	r2, [r2, #24]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6f      	ldr	r2, [pc, #444]	; (8002e14 <UART_SetConfig+0x224>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d16b      	bne.n	8002d34 <UART_SetConfig+0x144>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681c      	ldr	r4, [r3, #0]
 8002c60:	f7ff fb5e 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009a      	lsls	r2, r3, #2
 8002c6e:	441a      	add	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	4a67      	ldr	r2, [pc, #412]	; (8002e18 <UART_SetConfig+0x228>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	011d      	lsls	r5, r3, #4
 8002c84:	f7ff fb4c 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009a      	lsls	r2, r3, #2
 8002c92:	441a      	add	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c9e:	f7ff fb3f 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	4a57      	ldr	r2, [pc, #348]	; (8002e18 <UART_SetConfig+0x228>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2264      	movs	r2, #100	; 0x64
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	1af3      	subs	r3, r6, r3
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	3332      	adds	r3, #50	; 0x32
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <UART_SetConfig+0x228>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd8:	441d      	add	r5, r3
 8002cda:	f7ff fb21 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009a      	lsls	r2, r3, #2
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002cf4:	f7ff fb14 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	009a      	lsls	r2, r3, #2
 8002d02:	441a      	add	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	4a42      	ldr	r2, [pc, #264]	; (8002e18 <UART_SetConfig+0x228>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	2264      	movs	r2, #100	; 0x64
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	1af3      	subs	r3, r6, r3
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	3332      	adds	r3, #50	; 0x32
 8002d22:	4a3d      	ldr	r2, [pc, #244]	; (8002e18 <UART_SetConfig+0x228>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	442b      	add	r3, r5
 8002d30:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 8002d32:	e06a      	b.n	8002e0a <UART_SetConfig+0x21a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681c      	ldr	r4, [r3, #0]
 8002d38:	f7ff fad0 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <UART_SetConfig+0x228>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	011d      	lsls	r5, r3, #4
 8002d5c:	f7ff fabe 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	009a      	lsls	r2, r3, #2
 8002d6a:	441a      	add	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d76:	f7ff fab1 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009a      	lsls	r2, r3, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <UART_SetConfig+0x228>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2264      	movs	r2, #100	; 0x64
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	1af3      	subs	r3, r6, r3
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	3332      	adds	r3, #50	; 0x32
 8002da4:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <UART_SetConfig+0x228>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db0:	441d      	add	r5, r3
 8002db2:	f7ff fa93 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8002dcc:	f7ff fa86 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009a      	lsls	r2, r3, #2
 8002dda:	441a      	add	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	4a0c      	ldr	r2, [pc, #48]	; (8002e18 <UART_SetConfig+0x228>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	2264      	movs	r2, #100	; 0x64
 8002df0:	fb02 f303 	mul.w	r3, r2, r3
 8002df4:	1af3      	subs	r3, r6, r3
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	3332      	adds	r3, #50	; 0x32
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <UART_SetConfig+0x228>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	442b      	add	r3, r5
 8002e08:	60a3      	str	r3, [r4, #8]
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40013800 	.word	0x40013800
 8002e18:	51eb851f 	.word	0x51eb851f

08002e1c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8002e20:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e22:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <MX_CAN_Init+0x68>)
 8002e24:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e28:	2202      	movs	r2, #2
 8002e2a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e32:	609a      	str	r2, [r3, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_1TQ;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_1TQ;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	615a      	str	r2, [r3, #20]
  hcan.Init.TTCM = DISABLE;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
  hcan.Init.NART = DISABLE;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_CAN_Init+0x64>)
 8002e6c:	f7fd f9ce 	bl	800020c <HAL_CAN_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8002e76:	f000 fa1d 	bl	80032b4 <Error_Handler>
  }

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000064 	.word	0x20000064
 8002e84:	40006400 	.word	0x40006400

08002e88 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2a      	ldr	r2, [pc, #168]	; (8002f40 <HAL_CAN_MspInit+0xb8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d14d      	bne.n	8002f36 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002e9a:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <HAL_CAN_MspInit+0xbc>)
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_CAN_MspInit+0xbc>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	61d3      	str	r3, [r2, #28]
 8002ea6:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <HAL_CAN_MspInit+0xbc>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
  
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	f107 0310 	add.w	r3, r7, #16
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4820      	ldr	r0, [pc, #128]	; (8002f48 <HAL_CAN_MspInit+0xc0>)
 8002ec8:	f7fd ff32 	bl	8000d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4819      	ldr	r0, [pc, #100]	; (8002f48 <HAL_CAN_MspInit+0xc0>)
 8002ee2:	f7fd ff25 	bl	8000d30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002ee6:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <HAL_CAN_MspInit+0xc4>)
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_CAN_MspInit+0xc4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef4:	6053      	str	r3, [r2, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2013      	movs	r0, #19
 8002efc:	f7fd feba 	bl	8000c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002f00:	2013      	movs	r0, #19
 8002f02:	f7fd fed3 	bl	8000cac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2014      	movs	r0, #20
 8002f0c:	f7fd feb2 	bl	8000c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002f10:	2014      	movs	r0, #20
 8002f12:	f7fd fecb 	bl	8000cac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	2015      	movs	r0, #21
 8002f1c:	f7fd feaa 	bl	8000c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002f20:	2015      	movs	r0, #21
 8002f22:	f7fd fec3 	bl	8000cac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	2016      	movs	r0, #22
 8002f2c:	f7fd fea2 	bl	8000c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002f30:	2016      	movs	r0, #22
 8002f32:	f7fd febb 	bl	8000cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002f36:	bf00      	nop
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40006400 	.word	0x40006400
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40010c00 	.word	0x40010c00
 8002f4c:	40010000 	.word	0x40010000

08002f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <MX_GPIO_Init+0x60>)
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <MX_GPIO_Init+0x60>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6193      	str	r3, [r2, #24]
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <MX_GPIO_Init+0x60>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <MX_GPIO_Init+0x60>)
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <MX_GPIO_Init+0x60>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f043 0308 	orr.w	r3, r3, #8
 8002f78:	6193      	str	r3, [r2, #24]
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <MX_GPIO_Init+0x60>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2120      	movs	r1, #32
 8002f8a:	480a      	ldr	r0, [pc, #40]	; (8002fb4 <MX_GPIO_Init+0x64>)
 8002f8c:	f7fe f82e 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002f90:	2320      	movs	r3, #32
 8002f92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f94:	2301      	movs	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f9c:	f107 0308 	add.w	r3, r7, #8
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <MX_GPIO_Init+0x64>)
 8002fa4:	f7fd fec4 	bl	8000d30 <HAL_GPIO_Init>

}
 8002fa8:	bf00      	nop
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40010800 	.word	0x40010800

08002fb8 <CAN_TO_UART_Transfer>:
	id[3] = (unsigned int) (uartRxMsg[14] & 0xFF);
	hcan.pTxMsg->ExtId = id[0]|id[1]|id[2]|id[3];
}

void CAN_TO_UART_Transfer()
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
	uartTxMsg[0] = hcan.pRxMsg->DLC;
 8002fbe:	4b21      	ldr	r3, [pc, #132]	; (8003044 <CAN_TO_UART_Transfer+0x8c>)
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <CAN_TO_UART_Transfer+0x90>)
 8002fc8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < hcan.pRxMsg->DLC; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	e00c      	b.n	8002fea <CAN_TO_UART_Transfer+0x32>
	{
		uartTxMsg[i+1] = hcan.pRxMsg->Data[i+1];
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <CAN_TO_UART_Transfer+0x8c>)
 8002fd6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	3201      	adds	r2, #1
 8002fdc:	440a      	add	r2, r1
 8002fde:	7d11      	ldrb	r1, [r2, #20]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <CAN_TO_UART_Transfer+0x90>)
 8002fe2:	54d1      	strb	r1, [r2, r3]
}

void CAN_TO_UART_Transfer()
{
	uartTxMsg[0] = hcan.pRxMsg->DLC;
	for(int i = 0; i < hcan.pRxMsg->DLC; i++)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <CAN_TO_UART_Transfer+0x8c>)
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d8ec      	bhi.n	8002fd0 <CAN_TO_UART_Transfer+0x18>
	{
		uartTxMsg[i+1] = hcan.pRxMsg->Data[i+1];
	}
	uartTxMsg[9] = DATA_FRAME;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <CAN_TO_UART_Transfer+0x90>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	725a      	strb	r2, [r3, #9]
	uartTxMsg[10] = (unsigned char) ((hcan.pRxMsg->ExtId >> 24) & 0xFF);
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <CAN_TO_UART_Transfer+0x8c>)
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0e1b      	lsrs	r3, r3, #24
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <CAN_TO_UART_Transfer+0x90>)
 8003008:	729a      	strb	r2, [r3, #10]
	uartTxMsg[11] = (unsigned char) ((hcan.pRxMsg->ExtId >> 16) & 0xFF);
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <CAN_TO_UART_Transfer+0x8c>)
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	b2da      	uxtb	r2, r3
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <CAN_TO_UART_Transfer+0x90>)
 8003016:	72da      	strb	r2, [r3, #11]
	uartTxMsg[12] = (unsigned char) ((hcan.pRxMsg->ExtId >> 8) & 0xFF);
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <CAN_TO_UART_Transfer+0x8c>)
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <CAN_TO_UART_Transfer+0x90>)
 8003024:	731a      	strb	r2, [r3, #12]
	uartTxMsg[13] = (unsigned char) ((hcan.pRxMsg->ExtId) & 0xFF);
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <CAN_TO_UART_Transfer+0x8c>)
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <CAN_TO_UART_Transfer+0x90>)
 8003030:	735a      	strb	r2, [r3, #13]
	uartTxMsg[14] = ARINC_MSG;
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <CAN_TO_UART_Transfer+0x90>)
 8003034:	2201      	movs	r2, #1
 8003036:	739a      	strb	r2, [r3, #14]
//	if(hcan.pRxMsg->ExtId == 0x82501C0){HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);}
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000064 	.word	0x20000064
 8003048:	200000b4 	.word	0x200000b4

0800304c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	if(uartRxMsg[0] == ARINC_MSG){
 8003054:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_UART_RxCpltCallback+0xac>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d106      	bne.n	800306a <HAL_UART_RxCpltCallback+0x1e>
//		UART_TO_CAN_Transfer();

		HAL_UART_Transmit(&huart2, (uint8_t*) &uartRxMsg, 15, 100);
 800305c:	2364      	movs	r3, #100	; 0x64
 800305e:	220f      	movs	r2, #15
 8003060:	4925      	ldr	r1, [pc, #148]	; (80030f8 <HAL_UART_RxCpltCallback+0xac>)
 8003062:	4826      	ldr	r0, [pc, #152]	; (80030fc <HAL_UART_RxCpltCallback+0xb0>)
 8003064:	f7ff f9c8 	bl	80023f8 <HAL_UART_Transmit>
 8003068:	e03c      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x98>
	}else if(uartRxMsg[0] == CTRL_MSG){
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_UART_RxCpltCallback+0xac>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d138      	bne.n	80030e4 <HAL_UART_RxCpltCallback+0x98>

		  uartTxMsg[0] = 0x08;
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 8003074:	2208      	movs	r2, #8
 8003076:	701a      	strb	r2, [r3, #0]
		  // CAN_MSG.data[8]
		  uartTxMsg[1] = 0x13;
 8003078:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 800307a:	2213      	movs	r2, #19
 800307c:	705a      	strb	r2, [r3, #1]
		  uartTxMsg[2] = 0x43;
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 8003080:	2243      	movs	r2, #67	; 0x43
 8003082:	709a      	strb	r2, [r3, #2]
		  uartTxMsg[3] = 0x43;
 8003084:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 8003086:	2243      	movs	r2, #67	; 0x43
 8003088:	70da      	strb	r2, [r3, #3]
		  uartTxMsg[4] = 0x43;
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 800308c:	2243      	movs	r2, #67	; 0x43
 800308e:	711a      	strb	r2, [r3, #4]
		  uartTxMsg[5] = 0x43;
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 8003092:	2243      	movs	r2, #67	; 0x43
 8003094:	715a      	strb	r2, [r3, #5]
		  uartTxMsg[6] = 0x43;
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 8003098:	2243      	movs	r2, #67	; 0x43
 800309a:	719a      	strb	r2, [r3, #6]
		  uartTxMsg[7] = 0x43;
 800309c:	4b18      	ldr	r3, [pc, #96]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 800309e:	2243      	movs	r2, #67	; 0x43
 80030a0:	71da      	strb	r2, [r3, #7]
		  uartTxMsg[8] = 0x43;
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 80030a4:	2243      	movs	r2, #67	; 0x43
 80030a6:	721a      	strb	r2, [r3, #8]
		  // frame type
		  uartTxMsg[9] = DATA_FRAME;
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	725a      	strb	r2, [r3, #9]
		  // identifier
		  uartTxMsg[10] = 0x08;
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 80030b0:	2208      	movs	r2, #8
 80030b2:	729a      	strb	r2, [r3, #10]
		  uartTxMsg[11] = 0x25;
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 80030b6:	2225      	movs	r2, #37	; 0x25
 80030b8:	72da      	strb	r2, [r3, #11]
		  uartTxMsg[12] = 0x01;
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 80030bc:	2201      	movs	r2, #1
 80030be:	731a      	strb	r2, [r3, #12]
		  uartTxMsg[13] = 0xC0;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 80030c2:	22c0      	movs	r2, #192	; 0xc0
 80030c4:	735a      	strb	r2, [r3, #13]
		  // opcode
		  uartTxMsg[14] = ARINC_MSG;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	739a      	strb	r2, [r3, #14]

		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
 80030cc:	2364      	movs	r3, #100	; 0x64
 80030ce:	220f      	movs	r2, #15
 80030d0:	490b      	ldr	r1, [pc, #44]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 80030d2:	480a      	ldr	r0, [pc, #40]	; (80030fc <HAL_UART_RxCpltCallback+0xb0>)
 80030d4:	f7ff f990 	bl	80023f8 <HAL_UART_Transmit>


		HAL_UART_Transmit(&huart2, (uint8_t*) &uartTxMsg, 15, 100);
 80030d8:	2364      	movs	r3, #100	; 0x64
 80030da:	220f      	movs	r2, #15
 80030dc:	4908      	ldr	r1, [pc, #32]	; (8003100 <HAL_UART_RxCpltCallback+0xb4>)
 80030de:	4807      	ldr	r0, [pc, #28]	; (80030fc <HAL_UART_RxCpltCallback+0xb0>)
 80030e0:	f7ff f98a 	bl	80023f8 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_IT(&huart2, uartRxMsg, MSG_PKT_SIZE);
 80030e4:	220f      	movs	r2, #15
 80030e6:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_UART_RxCpltCallback+0xac>)
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <HAL_UART_RxCpltCallback+0xb0>)
 80030ea:	f7ff fa83 	bl	80025f4 <HAL_UART_Receive_IT>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200000a4 	.word	0x200000a4
 80030fc:	200000c4 	.word	0x200000c4
 8003100:	200000b4 	.word	0x200000b4

08003104 <HAL_CAN_TxCpltCallback>:

void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef *CanHandle)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800310c:	2201      	movs	r2, #1
 800310e:	2120      	movs	r1, #32
 8003110:	4803      	ldr	r0, [pc, #12]	; (8003120 <HAL_CAN_TxCpltCallback+0x1c>)
 8003112:	f7fd ff6b 	bl	8000fec <HAL_GPIO_WritePin>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40010800 	.word	0x40010800

08003124 <HAL_CAN_RxCpltCallback>:

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *CanHandle)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	2120      	movs	r1, #32
 8003130:	480b      	ldr	r0, [pc, #44]	; (8003160 <HAL_CAN_RxCpltCallback+0x3c>)
 8003132:	f7fd ff5b 	bl	8000fec <HAL_GPIO_WritePin>
	CAN_TO_UART_Transfer();
 8003136:	f7ff ff3f 	bl	8002fb8 <CAN_TO_UART_Transfer>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*) &uartTxMsg, 15);
 800313a:	220f      	movs	r2, #15
 800313c:	4909      	ldr	r1, [pc, #36]	; (8003164 <HAL_CAN_RxCpltCallback+0x40>)
 800313e:	480a      	ldr	r0, [pc, #40]	; (8003168 <HAL_CAN_RxCpltCallback+0x44>)
 8003140:	f7ff fa02 	bl	8002548 <HAL_UART_Transmit_IT>

  /* Receive */
  if (HAL_CAN_Receive_IT(CanHandle, 10) != HAL_OK)
 8003144:	210a      	movs	r1, #10
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fa14 	bl	8000574 <HAL_CAN_Receive_IT>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_CAN_RxCpltCallback+0x32>
  {
//	  HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
    /* Reception Error */
    Error_Handler();
 8003152:	f000 f8af 	bl	80032b4 <Error_Handler>
  }
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40010800 	.word	0x40010800
 8003164:	200000b4 	.word	0x200000b4
 8003168:	200000c4 	.word	0x200000c4

0800316c <main>:
/* USER CODE END 0 */

int main(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003172:	f7fc ffeb 	bl	800014c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003176:	f000 f855 	bl	8003224 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800317a:	f7ff fee9 	bl	8002f50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800317e:	f000 f97f 	bl	8003480 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8003182:	f7ff fe4b 	bl	8002e1c <MX_CAN_Init>

  /* USER CODE BEGIN 2 */

  //start listening for uart messages
  HAL_UART_Receive_IT(&huart2, uartRxMsg, MSG_PKT_SIZE);
 8003186:	220f      	movs	r2, #15
 8003188:	4920      	ldr	r1, [pc, #128]	; (800320c <main+0xa0>)
 800318a:	4821      	ldr	r0, [pc, #132]	; (8003210 <main+0xa4>)
 800318c:	f7ff fa32 	bl	80025f4 <HAL_UART_Receive_IT>
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;

  /*##-1- Configure the CAN peripheral #######################################*/
  CAN_FilterConfTypeDef  sFilterConfig;
  hcan.pTxMsg = &TxMessage;
 8003190:	4b20      	ldr	r3, [pc, #128]	; (8003214 <main+0xa8>)
 8003192:	4a21      	ldr	r2, [pc, #132]	; (8003218 <main+0xac>)
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
  hcan.pRxMsg = &RxMessage;
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <main+0xa8>)
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <main+0xb0>)
 800319a:	635a      	str	r2, [r3, #52]	; 0x34

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterNumber = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80031a4:	2301      	movs	r3, #1
 80031a6:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80031a8:	2300      	movs	r3, #0
 80031aa:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80031ac:	2300      	movs	r3, #0
 80031ae:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80031bc:	2301      	movs	r3, #1
 80031be:	623b      	str	r3, [r7, #32]
  sFilterConfig.BankNumber = 14;
 80031c0:	230e      	movs	r3, #14
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80031c4:	463b      	mov	r3, r7
 80031c6:	4619      	mov	r1, r3
 80031c8:	4812      	ldr	r0, [pc, #72]	; (8003214 <main+0xa8>)
 80031ca:	f7fd f901 	bl	80003d0 <HAL_CAN_ConfigFilter>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <main+0x6c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80031d4:	f000 f86e 	bl	80032b4 <Error_Handler>
  }

  /*##-3- Configure Transmission process #####################################*/
  hcan.pTxMsg->StdId = 0x00;
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <main+0xa8>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
  hcan.pTxMsg->ExtId = 0xE9E1AC3;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <main+0xa8>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <main+0xb4>)
 80031e6:	605a      	str	r2, [r3, #4]
  hcan.pTxMsg->RTR = CAN_RTR_DATA;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <main+0xa8>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	2200      	movs	r2, #0
 80031ee:	60da      	str	r2, [r3, #12]
  hcan.pTxMsg->IDE = CAN_ID_EXT;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <main+0xa8>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	2204      	movs	r2, #4
 80031f6:	609a      	str	r2, [r3, #8]
  hcan.pTxMsg->DLC = 8;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <main+0xa8>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	2208      	movs	r2, #8
 80031fe:	611a      	str	r2, [r3, #16]

  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 8003200:	2100      	movs	r1, #0
 8003202:	4804      	ldr	r0, [pc, #16]	; (8003214 <main+0xa8>)
 8003204:	f7fd f9b6 	bl	8000574 <HAL_CAN_Receive_IT>
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
 8003208:	e7fe      	b.n	8003208 <main+0x9c>
 800320a:	bf00      	nop
 800320c:	200000a4 	.word	0x200000a4
 8003210:	200000c4 	.word	0x200000c4
 8003214:	20000064 	.word	0x20000064
 8003218:	20000024 	.word	0x20000024
 800321c:	20000040 	.word	0x20000040
 8003220:	0e9e1ac3 	.word	0x0e9e1ac3

08003224 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b090      	sub	sp, #64	; 0x40
 8003228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800322a:	2302      	movs	r3, #2
 800322c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800322e:	2301      	movs	r3, #1
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003232:	2310      	movs	r3, #16
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003236:	2302      	movs	r3, #2
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800323a:	2300      	movs	r3, #0
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800323e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003244:	f107 0318 	add.w	r3, r7, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd fee7 	bl	800101c <HAL_RCC_OscConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003254:	f000 f82e 	bl	80032b4 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003258:	230f      	movs	r3, #15
 800325a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800325c:	2302      	movs	r3, #2
 800325e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2102      	movs	r1, #2
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fdf2 	bl	8001e5c <HAL_RCC_ClockConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800327e:	f000 f819 	bl	80032b4 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003282:	f7ff f821 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 8003286:	4602      	mov	r2, r0
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <SystemClock_Config+0x8c>)
 800328a:	fba3 2302 	umull	r2, r3, r3, r2
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fd19 	bl	8000cc8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003296:	2004      	movs	r0, #4
 8003298:	f7fd fd22 	bl	8000ce0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	f7fd fce6 	bl	8000c74 <HAL_NVIC_SetPriority>
}
 80032a8:	bf00      	nop
 80032aa:	3740      	adds	r7, #64	; 0x40
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	10624dd3 	.word	0x10624dd3

080032b4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 80032b8:	e7fe      	b.n	80032b8 <Error_Handler+0x4>
 80032ba:	bf00      	nop

080032bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032c2:	4a22      	ldr	r2, [pc, #136]	; (800334c <HAL_MspInit+0x90>)
 80032c4:	4b21      	ldr	r3, [pc, #132]	; (800334c <HAL_MspInit+0x90>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6193      	str	r3, [r2, #24]
 80032ce:	4b1f      	ldr	r3, [pc, #124]	; (800334c <HAL_MspInit+0x90>)
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032da:	2003      	movs	r0, #3
 80032dc:	f7fd fcbe 	bl	8000c5c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	f06f 000b 	mvn.w	r0, #11
 80032e8:	f7fd fcc4 	bl	8000c74 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	f06f 000a 	mvn.w	r0, #10
 80032f4:	f7fd fcbe 	bl	8000c74 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80032f8:	2200      	movs	r2, #0
 80032fa:	2100      	movs	r1, #0
 80032fc:	f06f 0009 	mvn.w	r0, #9
 8003300:	f7fd fcb8 	bl	8000c74 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003304:	2200      	movs	r2, #0
 8003306:	2100      	movs	r1, #0
 8003308:	f06f 0004 	mvn.w	r0, #4
 800330c:	f7fd fcb2 	bl	8000c74 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003310:	2200      	movs	r2, #0
 8003312:	2100      	movs	r1, #0
 8003314:	f06f 0003 	mvn.w	r0, #3
 8003318:	f7fd fcac 	bl	8000c74 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	2100      	movs	r1, #0
 8003320:	f06f 0001 	mvn.w	r0, #1
 8003324:	f7fd fca6 	bl	8000c74 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003328:	2200      	movs	r2, #0
 800332a:	2100      	movs	r1, #0
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f7fd fca0 	bl	8000c74 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003334:	4a06      	ldr	r2, [pc, #24]	; (8003350 <HAL_MspInit+0x94>)
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_MspInit+0x94>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800333e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003342:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	40010000 	.word	0x40010000

08003354 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8003364:	e7fe      	b.n	8003364 <HardFault_Handler+0x4>
 8003366:	bf00      	nop

08003368 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 800336c:	e7fe      	b.n	800336c <MemManage_Handler+0x4>
 800336e:	bf00      	nop

08003370 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8003374:	e7fe      	b.n	8003374 <BusFault_Handler+0x4>
 8003376:	bf00      	nop

08003378 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 800337c:	e7fe      	b.n	800337c <UsageFault_Handler+0x4>
 800337e:	bf00      	nop

08003380 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a8:	f7fc ff02 	bl	80001b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80033ac:	f7fd fcb4 	bl	8000d18 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <USB_HP_CAN1_TX_IRQHandler>:

/**
* @brief This function handles USB high priority or CAN TX interrupts.
*/
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80033ba:	f7fd f935 	bl	8000628 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000064 	.word	0x20000064

080033c8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80033cc:	4802      	ldr	r0, [pc, #8]	; (80033d8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80033ce:	f7fd f92b 	bl	8000628 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000064 	.word	0x20000064

080033dc <CAN1_RX1_IRQHandler>:

/**
* @brief This function handles CAN RX1 interrupt.
*/
void CAN1_RX1_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <CAN1_RX1_IRQHandler+0x10>)
 80033e2:	f7fd f921 	bl	8000628 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000064 	.word	0x20000064

080033f0 <CAN1_SCE_IRQHandler>:

/**
* @brief This function handles CAN SCE interrupt.
*/
void CAN1_SCE_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <CAN1_SCE_IRQHandler+0x10>)
 80033f6:	f7fd f917 	bl	8000628 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000064 	.word	0x20000064

08003404 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <USART2_IRQHandler+0x10>)
 800340a:	f7ff f959 	bl	80026c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200000c4 	.word	0x200000c4

08003418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <SystemInit+0x5c>)
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <SystemInit+0x5c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003428:	4912      	ldr	r1, [pc, #72]	; (8003474 <SystemInit+0x5c>)
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <SystemInit+0x5c>)
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <SystemInit+0x60>)
 8003430:	4013      	ands	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003434:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <SystemInit+0x5c>)
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <SystemInit+0x5c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800343e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003444:	4a0b      	ldr	r2, [pc, #44]	; (8003474 <SystemInit+0x5c>)
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <SystemInit+0x5c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003450:	4a08      	ldr	r2, [pc, #32]	; (8003474 <SystemInit+0x5c>)
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <SystemInit+0x5c>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800345a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <SystemInit+0x5c>)
 800345e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003462:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <SystemInit+0x64>)
 8003466:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800346a:	609a      	str	r2, [r3, #8]
#endif 
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	40021000 	.word	0x40021000
 8003478:	f8ff0000 	.word	0xf8ff0000
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <MX_USART2_UART_Init+0x50>)
 8003488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 800348c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034a6:	220c      	movs	r2, #12
 80034a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034b8:	f7fe ff54 	bl	8002364 <HAL_UART_Init>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80034c2:	f7ff fef7 	bl	80032b4 <Error_Handler>
  }

}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200000c4 	.word	0x200000c4
 80034d0:	40004400 	.word	0x40004400

080034d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_UART_MspInit+0x74>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d12b      	bne.n	800353e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034e6:	4a19      	ldr	r2, [pc, #100]	; (800354c <HAL_UART_MspInit+0x78>)
 80034e8:	4b18      	ldr	r3, [pc, #96]	; (800354c <HAL_UART_MspInit+0x78>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f0:	61d3      	str	r3, [r2, #28]
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <HAL_UART_MspInit+0x78>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034fe:	2304      	movs	r3, #4
 8003500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003506:	2303      	movs	r3, #3
 8003508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 0310 	add.w	r3, r7, #16
 800350e:	4619      	mov	r1, r3
 8003510:	480f      	ldr	r0, [pc, #60]	; (8003550 <HAL_UART_MspInit+0x7c>)
 8003512:	f7fd fc0d 	bl	8000d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003516:	2308      	movs	r3, #8
 8003518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003522:	f107 0310 	add.w	r3, r7, #16
 8003526:	4619      	mov	r1, r3
 8003528:	4809      	ldr	r0, [pc, #36]	; (8003550 <HAL_UART_MspInit+0x7c>)
 800352a:	f7fd fc01 	bl	8000d30 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2100      	movs	r1, #0
 8003532:	2026      	movs	r0, #38	; 0x26
 8003534:	f7fd fb9e 	bl	8000c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003538:	2026      	movs	r0, #38	; 0x26
 800353a:	f7fd fbb7 	bl	8000cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800353e:	bf00      	nop
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40004400 	.word	0x40004400
 800354c:	40021000 	.word	0x40021000
 8003550:	40010800 	.word	0x40010800

08003554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003554:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003556:	e003      	b.n	8003560 <LoopCopyDataInit>

08003558 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800355a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800355c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800355e:	3104      	adds	r1, #4

08003560 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003560:	480a      	ldr	r0, [pc, #40]	; (800358c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003564:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003566:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003568:	d3f6      	bcc.n	8003558 <CopyDataInit>
  ldr r2, =_sbss
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800356c:	e002      	b.n	8003574 <LoopFillZerobss>

0800356e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800356e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003570:	f842 3b04 	str.w	r3, [r2], #4

08003574 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003576:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003578:	d3f9      	bcc.n	800356e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800357a:	f7ff ff4d 	bl	8003418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800357e:	f000 f80f 	bl	80035a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003582:	f7ff fdf3 	bl	800316c <main>
  bx lr
 8003586:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8003588:	08003638 	.word	0x08003638
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800358c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003590:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003594:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8003598:	20000104 	.word	0x20000104

0800359c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800359c:	e7fe      	b.n	800359c <ADC1_2_IRQHandler>
	...

080035a0 <__libc_init_array>:
 80035a0:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <__libc_init_array+0x3c>)
 80035a2:	b570      	push	{r4, r5, r6, lr}
 80035a4:	461e      	mov	r6, r3
 80035a6:	4c0e      	ldr	r4, [pc, #56]	; (80035e0 <__libc_init_array+0x40>)
 80035a8:	2500      	movs	r5, #0
 80035aa:	1ae4      	subs	r4, r4, r3
 80035ac:	10a4      	asrs	r4, r4, #2
 80035ae:	42a5      	cmp	r5, r4
 80035b0:	d004      	beq.n	80035bc <__libc_init_array+0x1c>
 80035b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035b6:	4798      	blx	r3
 80035b8:	3501      	adds	r5, #1
 80035ba:	e7f8      	b.n	80035ae <__libc_init_array+0xe>
 80035bc:	f000 f816 	bl	80035ec <_init>
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <__libc_init_array+0x44>)
 80035c2:	4c09      	ldr	r4, [pc, #36]	; (80035e8 <__libc_init_array+0x48>)
 80035c4:	461e      	mov	r6, r3
 80035c6:	1ae4      	subs	r4, r4, r3
 80035c8:	10a4      	asrs	r4, r4, #2
 80035ca:	2500      	movs	r5, #0
 80035cc:	42a5      	cmp	r5, r4
 80035ce:	d004      	beq.n	80035da <__libc_init_array+0x3a>
 80035d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035d4:	4798      	blx	r3
 80035d6:	3501      	adds	r5, #1
 80035d8:	e7f8      	b.n	80035cc <__libc_init_array+0x2c>
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	08003630 	.word	0x08003630
 80035e0:	08003630 	.word	0x08003630
 80035e4:	08003630 	.word	0x08003630
 80035e8:	08003634 	.word	0x08003634

080035ec <_init>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	bf00      	nop
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr

080035f8 <_fini>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	bf00      	nop
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr
